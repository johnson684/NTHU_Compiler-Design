Nonterminals useless in grammar

    mul_ident


Terminals unused in grammar

    INC
    DEC
    SHIFT_LEFT
    SHIFT_RIGHT
    AND
    OR
    LOGICAL_NOT
    BITWISE_NOT
    OR_OP
    XOR_OP
    UADD
    INCPOST
    DECPOST
    SWITCH
    CASE
    DEFAULT
    CONTINUE
    COLON
    NL


Grammar

    0 $accept: program $end

    1 program: trans_unit

    2 trans_unit: external_declaration
    3           | trans_unit external_declaration

    4 external_declaration: declaration
    5                     | function_definition

    6 $@1: %empty

    7 function_definition: declaration_specifiers IDENTIFIER L_BRACKET parameter_list R_BRACKET $@1 compound_statement

    8 $@2: %empty

    9 function_definition: declaration_specifiers IDENTIFIER L_BRACKET R_BRACKET $@2 compound_statement

   10 declaration: scalar_decl
   11            | array_decl
   12            | func_decl

   13 declaration_specifiers: type_specifier
   14                       | type_specifier declaration_specifiers
   15                       | CONST
   16                       | CONST declaration_specifiers

   17 type_specifier: INT
   18               | CHAR
   19               | FLOAT
   20               | DOUBLE
   21               | VOID
   22               | SIGNED
   23               | UNSIGNED
   24               | LONG
   25               | SHORT

   26 LITERAL: INT_LITERAL
   27        | FLOAT_LITERAL
   28        | CHAR_LITERAL
   29        | STRING_LITERAL

   30 scalar_decl: declaration_specifiers scalar_init_declarator_list SEMICOLON

   31 scalar_init_declarator_list: scalar_init_declarator
   32                            | scalar_init_declarator COMMA scalar_init_declarator_list

   33 scalar_init_declarator: scalar_declarator
   34                       | scalar_declarator ASSIGN expression

   35 scalar_declarator: IDENTIFIER
   36                  | MULTIPLY IDENTIFIER

   37 func_decl: declaration_specifiers func_init_declarator_list SEMICOLON

   38 func_init_declarator_list: func_init_declarator
   39                          | func_init_declarator COMMA func_init_declarator_list

   40 func_init_declarator: func_declarator
   41                     | func_declarator ASSIGN expression

   42 func_declarator: func_direct_declarator
   43                | MULTIPLY func_direct_declarator

   44 func_direct_declarator: IDENTIFIER L_BRACKET R_BRACKET
   45                       | IDENTIFIER L_BRACKET parameter_list R_BRACKET

   46 parameter_list: parameter_declaration
   47               | parameter_declaration COMMA parameter_list

   48 parameter_declaration: declaration_specifiers scalar_declarator

   49 array_decl: declaration_specifiers array_init_declarator_list SEMICOLON

   50 array_init_declarator_list: array_init_declarator
   51                           | array_init_declarator COMMA array_init_declarator_list

   52 array_init_declarator: array_declarator
   53                      | array_declarator ASSIGN array_content

   54 array_declarator: IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET
   55                 | array_declarator L_SQ_BRACKET expression R_SQ_BRACKET

   56 array_content: L_PARENTHESIS array_expression R_PARENTHESIS
   57              | L_PARENTHESIS array_content COMMA array_content R_PARENTHESIS
   58              | L_PARENTHESIS array_content COMMA array_expression R_PARENTHESIS
   59              | L_PARENTHESIS array_content R_PARENTHESIS

   60 array_expression: expression
   61                 | array_expression COMMA expression

   62 primary_expression: IDENTIFIER
   63                   | LITERAL
   64                   | L_BRACKET expression R_BRACKET
   65                   | IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET

   66 argument_expression_list: assignment_expression
   67                         | assignment_expression COMMA argument_expression_list

   68 suffix_expression: primary_expression
   69                  | suffix_expression L_BRACKET R_BRACKET
   70                  | suffix_expression L_BRACKET argument_expression_list R_BRACKET

   71 prefix_expression: suffix_expression
   72                  | MINUS prefix_expression
   73                  | MULTIPLY prefix_expression
   74                  | AND_OP IDENTIFIER

   75 multiplicative_expression: prefix_expression
   76                          | multiplicative_expression MULTIPLY prefix_expression
   77                          | multiplicative_expression DIVIDE prefix_expression
   78                          | multiplicative_expression MOD prefix_expression

   79 additive_expression: multiplicative_expression
   80                    | additive_expression ADD multiplicative_expression
   81                    | additive_expression MINUS multiplicative_expression

   82 relational_expression: additive_expression
   83                      | relational_expression LESS_THAN additive_expression
   84                      | relational_expression LESS_OR_EQUAL_THAN additive_expression
   85                      | relational_expression GREATER_THAN additive_expression
   86                      | relational_expression GREATER_OR_EQUAL_THAN additive_expression

   87 equality_expression: relational_expression
   88                    | equality_expression EQUAL relational_expression
   89                    | equality_expression NOT_EQUAL relational_expression

   90 assignment_expression: equality_expression
   91                      | IDENTIFIER ASSIGN assignment_expression
   92                      | MULTIPLY IDENTIFIER ASSIGN assignment_expression
   93                      | IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET ASSIGN assignment_expression

   94 expression: assignment_expression

   95 statement: expression_statement
   96          | selection_statement
   97          | iteration_statement
   98          | jump_statement
   99          | compound_statement
  100          | delay_stmt
  101          | digitalwrite_stmt

  102 digitalwrite_stmt: DIGITALWRITE L_BRACKET INT_LITERAL COMMA DVALUE R_BRACKET SEMICOLON

  103 delay_stmt: DELAY L_BRACKET expression R_BRACKET SEMICOLON

  104 expression_statement: expression SEMICOLON

  105 selection_statement: if_statement

  106 if_statement: IF L_BRACKET expression R_BRACKET compound_statement
  107             | IF L_BRACKET expression R_BRACKET compound_statement ELSE compound_statement

  108 iteration_statement: while_statement
  109                    | do_while_statement
  110                    | for_statement

  111 while_statement: WHILE L_BRACKET expression R_BRACKET statement

  112 do_while_statement: DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON

  113 for_statement: FOR L_BRACKET expression SEMICOLON expression SEMICOLON expression R_BRACKET statement

  114 jump_statement: break_statement
  115               | return_statement

  116 break_statement: BREAK SEMICOLON

  117 return_statement: RETURN SEMICOLON
  118                 | RETURN expression SEMICOLON

  119 compound_statement: L_PARENTHESIS R_PARENTHESIS
  120                   | L_PARENTHESIS statement_declaration_list R_PARENTHESIS

  121 statement_declaration_list: statement
  122                           | statement statement_declaration_list
  123                           | declaration
  124                           | declaration statement_declaration_list


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INC <stringval> (258)
    DEC <stringval> (259)
    LESS_OR_EQUAL_THAN <stringval> (260) 84
    GREATER_OR_EQUAL_THAN <stringval> (261) 86
    SHIFT_LEFT <stringval> (262)
    SHIFT_RIGHT <stringval> (263)
    EQUAL <stringval> (264) 88
    NOT_EQUAL <stringval> (265) 89
    AND <stringval> (266)
    OR <stringval> (267)
    ADD <stringval> (268) 80
    MINUS <stringval> (269) 72 81
    MULTIPLY <stringval> (270) 36 43 73 76 92
    DIVIDE <stringval> (271) 77
    MOD <stringval> (272) 78
    LOGICAL_NOT <stringval> (273)
    BITWISE_NOT <stringval> (274)
    LESS_THAN <stringval> (275) 83
    GREATER_THAN <stringval> (276) 85
    AND_OP <stringval> (277) 74
    OR_OP <stringval> (278)
    XOR_OP <stringval> (279)
    ASSIGN <stringval> (280) 34 41 53 91 92 93
    UMINUS (281)
    UADD (282)
    UMULTI (283)
    UANDOP (284)
    INCPOST (285)
    DECPOST (286)
    DIGITALWRITE <stringval> (287) 102
    DELAY <stringval> (288) 103
    DVALUE <intval> (289) 102
    IF (290) 106 107
    ELSE (291) 107
    SWITCH (292)
    CASE (293)
    DEFAULT (294)
    WHILE (295) 111 112
    DO (296) 112
    FOR (297) 113
    RETURN (298) 117 118
    BREAK (299) 116
    CONTINUE (300)
    SEMICOLON <stringval> (301) 30 37 49 102 103 104 112 113 116 117 118
    COMMA <stringval> (302) 32 39 47 51 57 58 61 67 102
    COLON <stringval> (303)
    L_BRACKET <stringval> (304) 7 9 44 45 64 69 70 102 103 106 107 111 112 113
    R_BRACKET <stringval> (305) 7 9 44 45 64 69 70 102 103 106 107 111 112 113
    L_SQ_BRACKET <stringval> (306) 54 55 65 93
    R_SQ_BRACKET <stringval> (307) 54 55 65 93
    L_PARENTHESIS <stringval> (308) 56 57 58 59 119 120
    R_PARENTHESIS <stringval> (309) 56 57 58 59 119 120
    INT <stringval> (310) 17
    CHAR <stringval> (311) 18
    FLOAT <stringval> (312) 19
    DOUBLE <stringval> (313) 20
    VOID <stringval> (314) 21
    SIGNED <stringval> (315) 22
    UNSIGNED <stringval> (316) 23
    LONG <stringval> (317) 24
    SHORT <stringval> (318) 25
    CONST <stringval> (319) 15 16
    IDENTIFIER <stringval> (320) 7 9 35 36 44 45 54 62 65 74 91 92 93
    CHAR_LITERAL <stringval> (321) 28
    STRING_LITERAL <stringval> (322) 29
    NL <stringval> (323)
    INT_LITERAL <intval> (324) 26 102
    FLOAT_LITERAL <dval> (325) 27


Nonterminals, with rules where they appear

    $accept (71)
        on left: 0
    program (72)
        on left: 1
        on right: 0
    trans_unit <stringval> (73)
        on left: 2 3
        on right: 1 3
    external_declaration <stringval> (74)
        on left: 4 5
        on right: 2 3
    function_definition <stringval> (75)
        on left: 7 9
        on right: 5
    $@1 (76)
        on left: 6
        on right: 7
    $@2 (77)
        on left: 8
        on right: 9
    declaration <stringval> (78)
        on left: 10 11 12
        on right: 4 123 124
    declaration_specifiers <stringval> (79)
        on left: 13 14 15 16
        on right: 7 9 14 16 30 37 48 49
    type_specifier <stringval> (80)
        on left: 17 18 19 20 21 22 23 24 25
        on right: 13 14
    LITERAL <stringval> (81)
        on left: 26 27 28 29
        on right: 63
    scalar_decl <stringval> (82)
        on left: 30
        on right: 10
    scalar_init_declarator_list <stringval> (83)
        on left: 31 32
        on right: 30 32
    scalar_init_declarator <stringval> (84)
        on left: 33 34
        on right: 31 32
    scalar_declarator <stringval> (85)
        on left: 35 36
        on right: 33 34 48
    func_decl <stringval> (86)
        on left: 37
        on right: 12
    func_init_declarator_list <stringval> (87)
        on left: 38 39
        on right: 37 39
    func_init_declarator <stringval> (88)
        on left: 40 41
        on right: 38 39
    func_declarator <stringval> (89)
        on left: 42 43
        on right: 40 41
    func_direct_declarator <stringval> (90)
        on left: 44 45
        on right: 42 43
    parameter_list <stringval> (91)
        on left: 46 47
        on right: 7 45 47
    parameter_declaration <stringval> (92)
        on left: 48
        on right: 46 47
    array_decl <stringval> (93)
        on left: 49
        on right: 11
    array_init_declarator_list <stringval> (94)
        on left: 50 51
        on right: 49 51
    array_init_declarator <stringval> (95)
        on left: 52 53
        on right: 50 51
    array_declarator <stringval> (96)
        on left: 54 55
        on right: 52 53 55
    array_content <stringval> (97)
        on left: 56 57 58 59
        on right: 53 57 58 59
    array_expression <stringval> (98)
        on left: 60 61
        on right: 56 58 61
    primary_expression <stringval> (99)
        on left: 62 63 64 65
        on right: 68
    argument_expression_list <stringval> (100)
        on left: 66 67
        on right: 67 70
    suffix_expression <stringval> (101)
        on left: 68 69 70
        on right: 69 70 71
    prefix_expression <stringval> (102)
        on left: 71 72 73 74
        on right: 72 73 75 76 77 78
    multiplicative_expression <stringval> (103)
        on left: 75 76 77 78
        on right: 76 77 78 79 80 81
    additive_expression <stringval> (104)
        on left: 79 80 81
        on right: 80 81 82 83 84 85 86
    relational_expression <stringval> (105)
        on left: 82 83 84 85 86
        on right: 83 84 85 86 87 88 89
    equality_expression <stringval> (106)
        on left: 87 88 89
        on right: 88 89 90
    assignment_expression <stringval> (107)
        on left: 90 91 92 93
        on right: 66 67 91 92 93 94
    expression <stringval> (108)
        on left: 94
        on right: 34 41 54 55 60 61 64 65 93 103 104 106 107 111 112 113 118
    statement <stringval> (109)
        on left: 95 96 97 98 99 100 101
        on right: 111 112 113 121 122
    digitalwrite_stmt (110)
        on left: 102
        on right: 101
    delay_stmt (111)
        on left: 103
        on right: 100
    expression_statement <stringval> (112)
        on left: 104
        on right: 95
    selection_statement <stringval> (113)
        on left: 105
        on right: 96
    if_statement <stringval> (114)
        on left: 106 107
        on right: 105
    iteration_statement <stringval> (115)
        on left: 108 109 110
        on right: 97
    while_statement <stringval> (116)
        on left: 111
        on right: 108
    do_while_statement <stringval> (117)
        on left: 112
        on right: 109
    for_statement <stringval> (118)
        on left: 113
        on right: 110
    jump_statement <stringval> (119)
        on left: 114 115
        on right: 98
    break_statement <stringval> (120)
        on left: 116
        on right: 114
    return_statement <stringval> (121)
        on left: 117 118
        on right: 115
    compound_statement <stringval> (122)
        on left: 119 120
        on right: 7 9 99 106 107
    statement_declaration_list <stringval> (123)
        on left: 121 122 123 124
        on right: 120 122 124


State 0

    0 $accept: . program $end

    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    FLOAT     shift, and go to state 3
    DOUBLE    shift, and go to state 4
    VOID      shift, and go to state 5
    SIGNED    shift, and go to state 6
    UNSIGNED  shift, and go to state 7
    LONG      shift, and go to state 8
    SHORT     shift, and go to state 9
    CONST     shift, and go to state 10

    program                 go to state 11
    trans_unit              go to state 12
    external_declaration    go to state 13
    function_definition     go to state 14
    declaration             go to state 15
    declaration_specifiers  go to state 16
    type_specifier          go to state 17
    scalar_decl             go to state 18
    func_decl               go to state 19
    array_decl              go to state 20


State 1

   17 type_specifier: INT .

    $default  reduce using rule 17 (type_specifier)


State 2

   18 type_specifier: CHAR .

    $default  reduce using rule 18 (type_specifier)


State 3

   19 type_specifier: FLOAT .

    $default  reduce using rule 19 (type_specifier)


State 4

   20 type_specifier: DOUBLE .

    $default  reduce using rule 20 (type_specifier)


State 5

   21 type_specifier: VOID .

    $default  reduce using rule 21 (type_specifier)


State 6

   22 type_specifier: SIGNED .

    $default  reduce using rule 22 (type_specifier)


State 7

   23 type_specifier: UNSIGNED .

    $default  reduce using rule 23 (type_specifier)


State 8

   24 type_specifier: LONG .

    $default  reduce using rule 24 (type_specifier)


State 9

   25 type_specifier: SHORT .

    $default  reduce using rule 25 (type_specifier)


State 10

   15 declaration_specifiers: CONST .
   16                       | CONST . declaration_specifiers

    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    FLOAT     shift, and go to state 3
    DOUBLE    shift, and go to state 4
    VOID      shift, and go to state 5
    SIGNED    shift, and go to state 6
    UNSIGNED  shift, and go to state 7
    LONG      shift, and go to state 8
    SHORT     shift, and go to state 9
    CONST     shift, and go to state 10

    $default  reduce using rule 15 (declaration_specifiers)

    declaration_specifiers  go to state 21
    type_specifier          go to state 17


State 11

    0 $accept: program . $end

    $end  shift, and go to state 22


State 12

    1 program: trans_unit .
    3 trans_unit: trans_unit . external_declaration

    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    FLOAT     shift, and go to state 3
    DOUBLE    shift, and go to state 4
    VOID      shift, and go to state 5
    SIGNED    shift, and go to state 6
    UNSIGNED  shift, and go to state 7
    LONG      shift, and go to state 8
    SHORT     shift, and go to state 9
    CONST     shift, and go to state 10

    $default  reduce using rule 1 (program)

    external_declaration    go to state 23
    function_definition     go to state 14
    declaration             go to state 15
    declaration_specifiers  go to state 16
    type_specifier          go to state 17
    scalar_decl             go to state 18
    func_decl               go to state 19
    array_decl              go to state 20


State 13

    2 trans_unit: external_declaration .

    $default  reduce using rule 2 (trans_unit)


State 14

    5 external_declaration: function_definition .

    $default  reduce using rule 5 (external_declaration)


State 15

    4 external_declaration: declaration .

    $default  reduce using rule 4 (external_declaration)


State 16

    7 function_definition: declaration_specifiers . IDENTIFIER L_BRACKET parameter_list R_BRACKET $@1 compound_statement
    9                    | declaration_specifiers . IDENTIFIER L_BRACKET R_BRACKET $@2 compound_statement
   30 scalar_decl: declaration_specifiers . scalar_init_declarator_list SEMICOLON
   37 func_decl: declaration_specifiers . func_init_declarator_list SEMICOLON
   49 array_decl: declaration_specifiers . array_init_declarator_list SEMICOLON

    MULTIPLY    shift, and go to state 24
    IDENTIFIER  shift, and go to state 25

    scalar_init_declarator_list  go to state 26
    scalar_init_declarator       go to state 27
    scalar_declarator            go to state 28
    func_init_declarator_list    go to state 29
    func_init_declarator         go to state 30
    func_declarator              go to state 31
    func_direct_declarator       go to state 32
    array_init_declarator_list   go to state 33
    array_init_declarator        go to state 34
    array_declarator             go to state 35


State 17

   13 declaration_specifiers: type_specifier .
   14                       | type_specifier . declaration_specifiers

    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    FLOAT     shift, and go to state 3
    DOUBLE    shift, and go to state 4
    VOID      shift, and go to state 5
    SIGNED    shift, and go to state 6
    UNSIGNED  shift, and go to state 7
    LONG      shift, and go to state 8
    SHORT     shift, and go to state 9
    CONST     shift, and go to state 10

    $default  reduce using rule 13 (declaration_specifiers)

    declaration_specifiers  go to state 36
    type_specifier          go to state 17


State 18

   10 declaration: scalar_decl .

    $default  reduce using rule 10 (declaration)


State 19

   12 declaration: func_decl .

    $default  reduce using rule 12 (declaration)


State 20

   11 declaration: array_decl .

    $default  reduce using rule 11 (declaration)


State 21

   16 declaration_specifiers: CONST declaration_specifiers .

    $default  reduce using rule 16 (declaration_specifiers)


State 22

    0 $accept: program $end .

    $default  accept


State 23

    3 trans_unit: trans_unit external_declaration .

    $default  reduce using rule 3 (trans_unit)


State 24

   36 scalar_declarator: MULTIPLY . IDENTIFIER
   43 func_declarator: MULTIPLY . func_direct_declarator

    IDENTIFIER  shift, and go to state 37

    func_direct_declarator  go to state 38


State 25

    7 function_definition: declaration_specifiers IDENTIFIER . L_BRACKET parameter_list R_BRACKET $@1 compound_statement
    9                    | declaration_specifiers IDENTIFIER . L_BRACKET R_BRACKET $@2 compound_statement
   35 scalar_declarator: IDENTIFIER .
   44 func_direct_declarator: IDENTIFIER . L_BRACKET R_BRACKET
   45                       | IDENTIFIER . L_BRACKET parameter_list R_BRACKET
   54 array_declarator: IDENTIFIER . L_SQ_BRACKET expression R_SQ_BRACKET

    L_BRACKET     shift, and go to state 39
    L_SQ_BRACKET  shift, and go to state 40

    $default  reduce using rule 35 (scalar_declarator)


State 26

   30 scalar_decl: declaration_specifiers scalar_init_declarator_list . SEMICOLON

    SEMICOLON  shift, and go to state 41


State 27

   31 scalar_init_declarator_list: scalar_init_declarator .
   32                            | scalar_init_declarator . COMMA scalar_init_declarator_list

    COMMA  shift, and go to state 42

    $default  reduce using rule 31 (scalar_init_declarator_list)


State 28

   33 scalar_init_declarator: scalar_declarator .
   34                       | scalar_declarator . ASSIGN expression

    ASSIGN  shift, and go to state 43

    $default  reduce using rule 33 (scalar_init_declarator)


State 29

   37 func_decl: declaration_specifiers func_init_declarator_list . SEMICOLON

    SEMICOLON  shift, and go to state 44


State 30

   38 func_init_declarator_list: func_init_declarator .
   39                          | func_init_declarator . COMMA func_init_declarator_list

    COMMA  shift, and go to state 45

    $default  reduce using rule 38 (func_init_declarator_list)


State 31

   40 func_init_declarator: func_declarator .
   41                     | func_declarator . ASSIGN expression

    ASSIGN  shift, and go to state 46

    $default  reduce using rule 40 (func_init_declarator)


State 32

   42 func_declarator: func_direct_declarator .

    $default  reduce using rule 42 (func_declarator)


State 33

   49 array_decl: declaration_specifiers array_init_declarator_list . SEMICOLON

    SEMICOLON  shift, and go to state 47


State 34

   50 array_init_declarator_list: array_init_declarator .
   51                           | array_init_declarator . COMMA array_init_declarator_list

    COMMA  shift, and go to state 48

    $default  reduce using rule 50 (array_init_declarator_list)


State 35

   52 array_init_declarator: array_declarator .
   53                      | array_declarator . ASSIGN array_content
   55 array_declarator: array_declarator . L_SQ_BRACKET expression R_SQ_BRACKET

    ASSIGN        shift, and go to state 49
    L_SQ_BRACKET  shift, and go to state 50

    $default  reduce using rule 52 (array_init_declarator)


State 36

   14 declaration_specifiers: type_specifier declaration_specifiers .

    $default  reduce using rule 14 (declaration_specifiers)


State 37

   36 scalar_declarator: MULTIPLY IDENTIFIER .
   44 func_direct_declarator: IDENTIFIER . L_BRACKET R_BRACKET
   45                       | IDENTIFIER . L_BRACKET parameter_list R_BRACKET

    L_BRACKET  shift, and go to state 51

    $default  reduce using rule 36 (scalar_declarator)


State 38

   43 func_declarator: MULTIPLY func_direct_declarator .

    $default  reduce using rule 43 (func_declarator)


State 39

    7 function_definition: declaration_specifiers IDENTIFIER L_BRACKET . parameter_list R_BRACKET $@1 compound_statement
    9                    | declaration_specifiers IDENTIFIER L_BRACKET . R_BRACKET $@2 compound_statement
   44 func_direct_declarator: IDENTIFIER L_BRACKET . R_BRACKET
   45                       | IDENTIFIER L_BRACKET . parameter_list R_BRACKET

    R_BRACKET  shift, and go to state 52
    INT        shift, and go to state 1
    CHAR       shift, and go to state 2
    FLOAT      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    VOID       shift, and go to state 5
    SIGNED     shift, and go to state 6
    UNSIGNED   shift, and go to state 7
    LONG       shift, and go to state 8
    SHORT      shift, and go to state 9
    CONST      shift, and go to state 10

    declaration_specifiers  go to state 53
    type_specifier          go to state 17
    parameter_list          go to state 54
    parameter_declaration   go to state 55


State 40

   54 array_declarator: IDENTIFIER L_SQ_BRACKET . expression R_SQ_BRACKET

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 74


State 41

   30 scalar_decl: declaration_specifiers scalar_init_declarator_list SEMICOLON .

    $default  reduce using rule 30 (scalar_decl)


State 42

   32 scalar_init_declarator_list: scalar_init_declarator COMMA . scalar_init_declarator_list

    MULTIPLY    shift, and go to state 75
    IDENTIFIER  shift, and go to state 76

    scalar_init_declarator_list  go to state 77
    scalar_init_declarator       go to state 27
    scalar_declarator            go to state 28


State 43

   34 scalar_init_declarator: scalar_declarator ASSIGN . expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 78


State 44

   37 func_decl: declaration_specifiers func_init_declarator_list SEMICOLON .

    $default  reduce using rule 37 (func_decl)


State 45

   39 func_init_declarator_list: func_init_declarator COMMA . func_init_declarator_list

    MULTIPLY    shift, and go to state 79
    IDENTIFIER  shift, and go to state 80

    func_init_declarator_list  go to state 81
    func_init_declarator       go to state 30
    func_declarator            go to state 31
    func_direct_declarator     go to state 32


State 46

   41 func_init_declarator: func_declarator ASSIGN . expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 82


State 47

   49 array_decl: declaration_specifiers array_init_declarator_list SEMICOLON .

    $default  reduce using rule 49 (array_decl)


State 48

   51 array_init_declarator_list: array_init_declarator COMMA . array_init_declarator_list

    IDENTIFIER  shift, and go to state 83

    array_init_declarator_list  go to state 84
    array_init_declarator       go to state 34
    array_declarator            go to state 35


State 49

   53 array_init_declarator: array_declarator ASSIGN . array_content

    L_PARENTHESIS  shift, and go to state 85

    array_content  go to state 86


State 50

   55 array_declarator: array_declarator L_SQ_BRACKET . expression R_SQ_BRACKET

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 87


State 51

   44 func_direct_declarator: IDENTIFIER L_BRACKET . R_BRACKET
   45                       | IDENTIFIER L_BRACKET . parameter_list R_BRACKET

    R_BRACKET  shift, and go to state 88
    INT        shift, and go to state 1
    CHAR       shift, and go to state 2
    FLOAT      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    VOID       shift, and go to state 5
    SIGNED     shift, and go to state 6
    UNSIGNED   shift, and go to state 7
    LONG       shift, and go to state 8
    SHORT      shift, and go to state 9
    CONST      shift, and go to state 10

    declaration_specifiers  go to state 53
    type_specifier          go to state 17
    parameter_list          go to state 89
    parameter_declaration   go to state 55


State 52

    9 function_definition: declaration_specifiers IDENTIFIER L_BRACKET R_BRACKET . $@2 compound_statement
   44 func_direct_declarator: IDENTIFIER L_BRACKET R_BRACKET .

    L_PARENTHESIS  reduce using rule 8 ($@2)
    $default       reduce using rule 44 (func_direct_declarator)

    $@2  go to state 90


State 53

   48 parameter_declaration: declaration_specifiers . scalar_declarator

    MULTIPLY    shift, and go to state 75
    IDENTIFIER  shift, and go to state 76

    scalar_declarator  go to state 91


State 54

    7 function_definition: declaration_specifiers IDENTIFIER L_BRACKET parameter_list . R_BRACKET $@1 compound_statement
   45 func_direct_declarator: IDENTIFIER L_BRACKET parameter_list . R_BRACKET

    R_BRACKET  shift, and go to state 92


State 55

   46 parameter_list: parameter_declaration .
   47               | parameter_declaration . COMMA parameter_list

    COMMA  shift, and go to state 93

    $default  reduce using rule 46 (parameter_list)


State 56

   72 prefix_expression: MINUS . prefix_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 95
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL             go to state 65
    primary_expression  go to state 66
    suffix_expression   go to state 67
    prefix_expression   go to state 96


State 57

   73 prefix_expression: MULTIPLY . prefix_expression
   92 assignment_expression: MULTIPLY . IDENTIFIER ASSIGN assignment_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 97
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL             go to state 65
    primary_expression  go to state 66
    suffix_expression   go to state 67
    prefix_expression   go to state 98


State 58

   74 prefix_expression: AND_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 99


State 59

   64 primary_expression: L_BRACKET . expression R_BRACKET

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 100


State 60

   62 primary_expression: IDENTIFIER .
   65                   | IDENTIFIER . L_SQ_BRACKET expression R_SQ_BRACKET
   91 assignment_expression: IDENTIFIER . ASSIGN assignment_expression
   93                      | IDENTIFIER . L_SQ_BRACKET expression R_SQ_BRACKET ASSIGN assignment_expression

    ASSIGN        shift, and go to state 101
    L_SQ_BRACKET  shift, and go to state 102

    $default  reduce using rule 62 (primary_expression)


State 61

   28 LITERAL: CHAR_LITERAL .

    $default  reduce using rule 28 (LITERAL)


State 62

   29 LITERAL: STRING_LITERAL .

    $default  reduce using rule 29 (LITERAL)


State 63

   26 LITERAL: INT_LITERAL .

    $default  reduce using rule 26 (LITERAL)


State 64

   27 LITERAL: FLOAT_LITERAL .

    $default  reduce using rule 27 (LITERAL)


State 65

   63 primary_expression: LITERAL .

    $default  reduce using rule 63 (primary_expression)


State 66

   68 suffix_expression: primary_expression .

    $default  reduce using rule 68 (suffix_expression)


State 67

   69 suffix_expression: suffix_expression . L_BRACKET R_BRACKET
   70                  | suffix_expression . L_BRACKET argument_expression_list R_BRACKET
   71 prefix_expression: suffix_expression .

    L_BRACKET  shift, and go to state 103

    $default  reduce using rule 71 (prefix_expression)


State 68

   75 multiplicative_expression: prefix_expression .

    $default  reduce using rule 75 (multiplicative_expression)


State 69

   76 multiplicative_expression: multiplicative_expression . MULTIPLY prefix_expression
   77                          | multiplicative_expression . DIVIDE prefix_expression
   78                          | multiplicative_expression . MOD prefix_expression
   79 additive_expression: multiplicative_expression .

    MULTIPLY  shift, and go to state 104
    DIVIDE    shift, and go to state 105
    MOD       shift, and go to state 106

    $default  reduce using rule 79 (additive_expression)


State 70

   80 additive_expression: additive_expression . ADD multiplicative_expression
   81                    | additive_expression . MINUS multiplicative_expression
   82 relational_expression: additive_expression .

    ADD    shift, and go to state 107
    MINUS  shift, and go to state 108

    $default  reduce using rule 82 (relational_expression)


State 71

   83 relational_expression: relational_expression . LESS_THAN additive_expression
   84                      | relational_expression . LESS_OR_EQUAL_THAN additive_expression
   85                      | relational_expression . GREATER_THAN additive_expression
   86                      | relational_expression . GREATER_OR_EQUAL_THAN additive_expression
   87 equality_expression: relational_expression .

    LESS_OR_EQUAL_THAN     shift, and go to state 109
    GREATER_OR_EQUAL_THAN  shift, and go to state 110
    LESS_THAN              shift, and go to state 111
    GREATER_THAN           shift, and go to state 112

    $default  reduce using rule 87 (equality_expression)


State 72

   88 equality_expression: equality_expression . EQUAL relational_expression
   89                    | equality_expression . NOT_EQUAL relational_expression
   90 assignment_expression: equality_expression .

    EQUAL      shift, and go to state 113
    NOT_EQUAL  shift, and go to state 114

    $default  reduce using rule 90 (assignment_expression)


State 73

   94 expression: assignment_expression .

    $default  reduce using rule 94 (expression)


State 74

   54 array_declarator: IDENTIFIER L_SQ_BRACKET expression . R_SQ_BRACKET

    R_SQ_BRACKET  shift, and go to state 115


State 75

   36 scalar_declarator: MULTIPLY . IDENTIFIER

    IDENTIFIER  shift, and go to state 116


State 76

   35 scalar_declarator: IDENTIFIER .

    $default  reduce using rule 35 (scalar_declarator)


State 77

   32 scalar_init_declarator_list: scalar_init_declarator COMMA scalar_init_declarator_list .

    $default  reduce using rule 32 (scalar_init_declarator_list)


State 78

   34 scalar_init_declarator: scalar_declarator ASSIGN expression .

    $default  reduce using rule 34 (scalar_init_declarator)


State 79

   43 func_declarator: MULTIPLY . func_direct_declarator

    IDENTIFIER  shift, and go to state 80

    func_direct_declarator  go to state 38


State 80

   44 func_direct_declarator: IDENTIFIER . L_BRACKET R_BRACKET
   45                       | IDENTIFIER . L_BRACKET parameter_list R_BRACKET

    L_BRACKET  shift, and go to state 51


State 81

   39 func_init_declarator_list: func_init_declarator COMMA func_init_declarator_list .

    $default  reduce using rule 39 (func_init_declarator_list)


State 82

   41 func_init_declarator: func_declarator ASSIGN expression .

    $default  reduce using rule 41 (func_init_declarator)


State 83

   54 array_declarator: IDENTIFIER . L_SQ_BRACKET expression R_SQ_BRACKET

    L_SQ_BRACKET  shift, and go to state 40


State 84

   51 array_init_declarator_list: array_init_declarator COMMA array_init_declarator_list .

    $default  reduce using rule 51 (array_init_declarator_list)


State 85

   56 array_content: L_PARENTHESIS . array_expression R_PARENTHESIS
   57              | L_PARENTHESIS . array_content COMMA array_content R_PARENTHESIS
   58              | L_PARENTHESIS . array_content COMMA array_expression R_PARENTHESIS
   59              | L_PARENTHESIS . array_content R_PARENTHESIS

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    L_PARENTHESIS   shift, and go to state 85
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    array_content              go to state 117
    array_expression           go to state 118
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 119


State 86

   53 array_init_declarator: array_declarator ASSIGN array_content .

    $default  reduce using rule 53 (array_init_declarator)


State 87

   55 array_declarator: array_declarator L_SQ_BRACKET expression . R_SQ_BRACKET

    R_SQ_BRACKET  shift, and go to state 120


State 88

   44 func_direct_declarator: IDENTIFIER L_BRACKET R_BRACKET .

    $default  reduce using rule 44 (func_direct_declarator)


State 89

   45 func_direct_declarator: IDENTIFIER L_BRACKET parameter_list . R_BRACKET

    R_BRACKET  shift, and go to state 121


State 90

    9 function_definition: declaration_specifiers IDENTIFIER L_BRACKET R_BRACKET $@2 . compound_statement

    L_PARENTHESIS  shift, and go to state 122

    compound_statement  go to state 123


State 91

   48 parameter_declaration: declaration_specifiers scalar_declarator .

    $default  reduce using rule 48 (parameter_declaration)


State 92

    7 function_definition: declaration_specifiers IDENTIFIER L_BRACKET parameter_list R_BRACKET . $@1 compound_statement
   45 func_direct_declarator: IDENTIFIER L_BRACKET parameter_list R_BRACKET .

    L_PARENTHESIS  reduce using rule 6 ($@1)
    $default       reduce using rule 45 (func_direct_declarator)

    $@1  go to state 124


State 93

   47 parameter_list: parameter_declaration COMMA . parameter_list

    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    FLOAT     shift, and go to state 3
    DOUBLE    shift, and go to state 4
    VOID      shift, and go to state 5
    SIGNED    shift, and go to state 6
    UNSIGNED  shift, and go to state 7
    LONG      shift, and go to state 8
    SHORT     shift, and go to state 9
    CONST     shift, and go to state 10

    declaration_specifiers  go to state 53
    type_specifier          go to state 17
    parameter_list          go to state 125
    parameter_declaration   go to state 55


State 94

   73 prefix_expression: MULTIPLY . prefix_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 95
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL             go to state 65
    primary_expression  go to state 66
    suffix_expression   go to state 67
    prefix_expression   go to state 98


State 95

   62 primary_expression: IDENTIFIER .
   65                   | IDENTIFIER . L_SQ_BRACKET expression R_SQ_BRACKET

    L_SQ_BRACKET  shift, and go to state 126

    $default  reduce using rule 62 (primary_expression)


State 96

   72 prefix_expression: MINUS prefix_expression .

    $default  reduce using rule 72 (prefix_expression)


State 97

   62 primary_expression: IDENTIFIER .
   65                   | IDENTIFIER . L_SQ_BRACKET expression R_SQ_BRACKET
   92 assignment_expression: MULTIPLY IDENTIFIER . ASSIGN assignment_expression

    ASSIGN        shift, and go to state 127
    L_SQ_BRACKET  shift, and go to state 126

    $default  reduce using rule 62 (primary_expression)


State 98

   73 prefix_expression: MULTIPLY prefix_expression .

    $default  reduce using rule 73 (prefix_expression)


State 99

   74 prefix_expression: AND_OP IDENTIFIER .

    $default  reduce using rule 74 (prefix_expression)


State 100

   64 primary_expression: L_BRACKET expression . R_BRACKET

    R_BRACKET  shift, and go to state 128


State 101

   91 assignment_expression: IDENTIFIER ASSIGN . assignment_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 129


State 102

   65 primary_expression: IDENTIFIER L_SQ_BRACKET . expression R_SQ_BRACKET
   93 assignment_expression: IDENTIFIER L_SQ_BRACKET . expression R_SQ_BRACKET ASSIGN assignment_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 130


State 103

   69 suffix_expression: suffix_expression L_BRACKET . R_BRACKET
   70                  | suffix_expression L_BRACKET . argument_expression_list R_BRACKET

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    R_BRACKET       shift, and go to state 131
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    argument_expression_list   go to state 132
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 133


State 104

   76 multiplicative_expression: multiplicative_expression MULTIPLY . prefix_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 95
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL             go to state 65
    primary_expression  go to state 66
    suffix_expression   go to state 67
    prefix_expression   go to state 134


State 105

   77 multiplicative_expression: multiplicative_expression DIVIDE . prefix_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 95
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL             go to state 65
    primary_expression  go to state 66
    suffix_expression   go to state 67
    prefix_expression   go to state 135


State 106

   78 multiplicative_expression: multiplicative_expression MOD . prefix_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 95
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL             go to state 65
    primary_expression  go to state 66
    suffix_expression   go to state 67
    prefix_expression   go to state 136


State 107

   80 additive_expression: additive_expression ADD . multiplicative_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 95
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 137


State 108

   81 additive_expression: additive_expression MINUS . multiplicative_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 95
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 138


State 109

   84 relational_expression: relational_expression LESS_OR_EQUAL_THAN . additive_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 95
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 139


State 110

   86 relational_expression: relational_expression GREATER_OR_EQUAL_THAN . additive_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 95
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 140


State 111

   83 relational_expression: relational_expression LESS_THAN . additive_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 95
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 141


State 112

   85 relational_expression: relational_expression GREATER_THAN . additive_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 95
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 142


State 113

   88 equality_expression: equality_expression EQUAL . relational_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 95
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 143


State 114

   89 equality_expression: equality_expression NOT_EQUAL . relational_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 94
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 95
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 144


State 115

   54 array_declarator: IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET .

    $default  reduce using rule 54 (array_declarator)


State 116

   36 scalar_declarator: MULTIPLY IDENTIFIER .

    $default  reduce using rule 36 (scalar_declarator)


State 117

   57 array_content: L_PARENTHESIS array_content . COMMA array_content R_PARENTHESIS
   58              | L_PARENTHESIS array_content . COMMA array_expression R_PARENTHESIS
   59              | L_PARENTHESIS array_content . R_PARENTHESIS

    COMMA          shift, and go to state 145
    R_PARENTHESIS  shift, and go to state 146


State 118

   56 array_content: L_PARENTHESIS array_expression . R_PARENTHESIS
   61 array_expression: array_expression . COMMA expression

    COMMA          shift, and go to state 147
    R_PARENTHESIS  shift, and go to state 148


State 119

   60 array_expression: expression .

    $default  reduce using rule 60 (array_expression)


State 120

   55 array_declarator: array_declarator L_SQ_BRACKET expression R_SQ_BRACKET .

    $default  reduce using rule 55 (array_declarator)


State 121

   45 func_direct_declarator: IDENTIFIER L_BRACKET parameter_list R_BRACKET .

    $default  reduce using rule 45 (func_direct_declarator)


State 122

  119 compound_statement: L_PARENTHESIS . R_PARENTHESIS
  120                   | L_PARENTHESIS . statement_declaration_list R_PARENTHESIS

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    DIGITALWRITE    shift, and go to state 149
    DELAY           shift, and go to state 150
    IF              shift, and go to state 151
    WHILE           shift, and go to state 152
    DO              shift, and go to state 153
    FOR             shift, and go to state 154
    RETURN          shift, and go to state 155
    BREAK           shift, and go to state 156
    L_BRACKET       shift, and go to state 59
    L_PARENTHESIS   shift, and go to state 122
    R_PARENTHESIS   shift, and go to state 157
    INT             shift, and go to state 1
    CHAR            shift, and go to state 2
    FLOAT           shift, and go to state 3
    DOUBLE          shift, and go to state 4
    VOID            shift, and go to state 5
    SIGNED          shift, and go to state 6
    UNSIGNED        shift, and go to state 7
    LONG            shift, and go to state 8
    SHORT           shift, and go to state 9
    CONST           shift, and go to state 10
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    declaration                 go to state 158
    declaration_specifiers      go to state 159
    type_specifier              go to state 17
    LITERAL                     go to state 65
    scalar_decl                 go to state 18
    func_decl                   go to state 19
    array_decl                  go to state 20
    primary_expression          go to state 66
    suffix_expression           go to state 67
    prefix_expression           go to state 68
    multiplicative_expression   go to state 69
    additive_expression         go to state 70
    relational_expression       go to state 71
    equality_expression         go to state 72
    assignment_expression       go to state 73
    expression                  go to state 160
    statement                   go to state 161
    digitalwrite_stmt           go to state 162
    delay_stmt                  go to state 163
    expression_statement        go to state 164
    selection_statement         go to state 165
    if_statement                go to state 166
    iteration_statement         go to state 167
    while_statement             go to state 168
    do_while_statement          go to state 169
    for_statement               go to state 170
    jump_statement              go to state 171
    break_statement             go to state 172
    return_statement            go to state 173
    compound_statement          go to state 174
    statement_declaration_list  go to state 175


State 123

    9 function_definition: declaration_specifiers IDENTIFIER L_BRACKET R_BRACKET $@2 compound_statement .

    $default  reduce using rule 9 (function_definition)


State 124

    7 function_definition: declaration_specifiers IDENTIFIER L_BRACKET parameter_list R_BRACKET $@1 . compound_statement

    L_PARENTHESIS  shift, and go to state 122

    compound_statement  go to state 176


State 125

   47 parameter_list: parameter_declaration COMMA parameter_list .

    $default  reduce using rule 47 (parameter_list)


State 126

   65 primary_expression: IDENTIFIER L_SQ_BRACKET . expression R_SQ_BRACKET

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 177


State 127

   92 assignment_expression: MULTIPLY IDENTIFIER ASSIGN . assignment_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 178


State 128

   64 primary_expression: L_BRACKET expression R_BRACKET .

    $default  reduce using rule 64 (primary_expression)


State 129

   91 assignment_expression: IDENTIFIER ASSIGN assignment_expression .

    $default  reduce using rule 91 (assignment_expression)


State 130

   65 primary_expression: IDENTIFIER L_SQ_BRACKET expression . R_SQ_BRACKET
   93 assignment_expression: IDENTIFIER L_SQ_BRACKET expression . R_SQ_BRACKET ASSIGN assignment_expression

    R_SQ_BRACKET  shift, and go to state 179


State 131

   69 suffix_expression: suffix_expression L_BRACKET R_BRACKET .

    $default  reduce using rule 69 (suffix_expression)


State 132

   70 suffix_expression: suffix_expression L_BRACKET argument_expression_list . R_BRACKET

    R_BRACKET  shift, and go to state 180


State 133

   66 argument_expression_list: assignment_expression .
   67                         | assignment_expression . COMMA argument_expression_list

    COMMA  shift, and go to state 181

    $default  reduce using rule 66 (argument_expression_list)


State 134

   76 multiplicative_expression: multiplicative_expression MULTIPLY prefix_expression .

    $default  reduce using rule 76 (multiplicative_expression)


State 135

   77 multiplicative_expression: multiplicative_expression DIVIDE prefix_expression .

    $default  reduce using rule 77 (multiplicative_expression)


State 136

   78 multiplicative_expression: multiplicative_expression MOD prefix_expression .

    $default  reduce using rule 78 (multiplicative_expression)


State 137

   76 multiplicative_expression: multiplicative_expression . MULTIPLY prefix_expression
   77                          | multiplicative_expression . DIVIDE prefix_expression
   78                          | multiplicative_expression . MOD prefix_expression
   80 additive_expression: additive_expression ADD multiplicative_expression .

    MULTIPLY  shift, and go to state 104
    DIVIDE    shift, and go to state 105
    MOD       shift, and go to state 106

    $default  reduce using rule 80 (additive_expression)


State 138

   76 multiplicative_expression: multiplicative_expression . MULTIPLY prefix_expression
   77                          | multiplicative_expression . DIVIDE prefix_expression
   78                          | multiplicative_expression . MOD prefix_expression
   81 additive_expression: additive_expression MINUS multiplicative_expression .

    MULTIPLY  shift, and go to state 104
    DIVIDE    shift, and go to state 105
    MOD       shift, and go to state 106

    $default  reduce using rule 81 (additive_expression)


State 139

   80 additive_expression: additive_expression . ADD multiplicative_expression
   81                    | additive_expression . MINUS multiplicative_expression
   84 relational_expression: relational_expression LESS_OR_EQUAL_THAN additive_expression .

    ADD    shift, and go to state 107
    MINUS  shift, and go to state 108

    $default  reduce using rule 84 (relational_expression)


State 140

   80 additive_expression: additive_expression . ADD multiplicative_expression
   81                    | additive_expression . MINUS multiplicative_expression
   86 relational_expression: relational_expression GREATER_OR_EQUAL_THAN additive_expression .

    ADD    shift, and go to state 107
    MINUS  shift, and go to state 108

    $default  reduce using rule 86 (relational_expression)


State 141

   80 additive_expression: additive_expression . ADD multiplicative_expression
   81                    | additive_expression . MINUS multiplicative_expression
   83 relational_expression: relational_expression LESS_THAN additive_expression .

    ADD    shift, and go to state 107
    MINUS  shift, and go to state 108

    $default  reduce using rule 83 (relational_expression)


State 142

   80 additive_expression: additive_expression . ADD multiplicative_expression
   81                    | additive_expression . MINUS multiplicative_expression
   85 relational_expression: relational_expression GREATER_THAN additive_expression .

    ADD    shift, and go to state 107
    MINUS  shift, and go to state 108

    $default  reduce using rule 85 (relational_expression)


State 143

   83 relational_expression: relational_expression . LESS_THAN additive_expression
   84                      | relational_expression . LESS_OR_EQUAL_THAN additive_expression
   85                      | relational_expression . GREATER_THAN additive_expression
   86                      | relational_expression . GREATER_OR_EQUAL_THAN additive_expression
   88 equality_expression: equality_expression EQUAL relational_expression .

    LESS_OR_EQUAL_THAN     shift, and go to state 109
    GREATER_OR_EQUAL_THAN  shift, and go to state 110
    LESS_THAN              shift, and go to state 111
    GREATER_THAN           shift, and go to state 112

    $default  reduce using rule 88 (equality_expression)


State 144

   83 relational_expression: relational_expression . LESS_THAN additive_expression
   84                      | relational_expression . LESS_OR_EQUAL_THAN additive_expression
   85                      | relational_expression . GREATER_THAN additive_expression
   86                      | relational_expression . GREATER_OR_EQUAL_THAN additive_expression
   89 equality_expression: equality_expression NOT_EQUAL relational_expression .

    LESS_OR_EQUAL_THAN     shift, and go to state 109
    GREATER_OR_EQUAL_THAN  shift, and go to state 110
    LESS_THAN              shift, and go to state 111
    GREATER_THAN           shift, and go to state 112

    $default  reduce using rule 89 (equality_expression)


State 145

   57 array_content: L_PARENTHESIS array_content COMMA . array_content R_PARENTHESIS
   58              | L_PARENTHESIS array_content COMMA . array_expression R_PARENTHESIS

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    L_PARENTHESIS   shift, and go to state 85
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    array_content              go to state 182
    array_expression           go to state 183
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 119


State 146

   59 array_content: L_PARENTHESIS array_content R_PARENTHESIS .

    $default  reduce using rule 59 (array_content)


State 147

   61 array_expression: array_expression COMMA . expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 184


State 148

   56 array_content: L_PARENTHESIS array_expression R_PARENTHESIS .

    $default  reduce using rule 56 (array_content)


State 149

  102 digitalwrite_stmt: DIGITALWRITE . L_BRACKET INT_LITERAL COMMA DVALUE R_BRACKET SEMICOLON

    L_BRACKET  shift, and go to state 185


State 150

  103 delay_stmt: DELAY . L_BRACKET expression R_BRACKET SEMICOLON

    L_BRACKET  shift, and go to state 186


State 151

  106 if_statement: IF . L_BRACKET expression R_BRACKET compound_statement
  107             | IF . L_BRACKET expression R_BRACKET compound_statement ELSE compound_statement

    L_BRACKET  shift, and go to state 187


State 152

  111 while_statement: WHILE . L_BRACKET expression R_BRACKET statement

    L_BRACKET  shift, and go to state 188


State 153

  112 do_while_statement: DO . statement WHILE L_BRACKET expression R_BRACKET SEMICOLON

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    DIGITALWRITE    shift, and go to state 149
    DELAY           shift, and go to state 150
    IF              shift, and go to state 151
    WHILE           shift, and go to state 152
    DO              shift, and go to state 153
    FOR             shift, and go to state 154
    RETURN          shift, and go to state 155
    BREAK           shift, and go to state 156
    L_BRACKET       shift, and go to state 59
    L_PARENTHESIS   shift, and go to state 122
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 160
    statement                  go to state 189
    digitalwrite_stmt          go to state 162
    delay_stmt                 go to state 163
    expression_statement       go to state 164
    selection_statement        go to state 165
    if_statement               go to state 166
    iteration_statement        go to state 167
    while_statement            go to state 168
    do_while_statement         go to state 169
    for_statement              go to state 170
    jump_statement             go to state 171
    break_statement            go to state 172
    return_statement           go to state 173
    compound_statement         go to state 174


State 154

  113 for_statement: FOR . L_BRACKET expression SEMICOLON expression SEMICOLON expression R_BRACKET statement

    L_BRACKET  shift, and go to state 190


State 155

  117 return_statement: RETURN . SEMICOLON
  118                 | RETURN . expression SEMICOLON

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    SEMICOLON       shift, and go to state 191
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 192


State 156

  116 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 193


State 157

  119 compound_statement: L_PARENTHESIS R_PARENTHESIS .

    $default  reduce using rule 119 (compound_statement)


State 158

  123 statement_declaration_list: declaration .
  124                           | declaration . statement_declaration_list

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    DIGITALWRITE    shift, and go to state 149
    DELAY           shift, and go to state 150
    IF              shift, and go to state 151
    WHILE           shift, and go to state 152
    DO              shift, and go to state 153
    FOR             shift, and go to state 154
    RETURN          shift, and go to state 155
    BREAK           shift, and go to state 156
    L_BRACKET       shift, and go to state 59
    L_PARENTHESIS   shift, and go to state 122
    INT             shift, and go to state 1
    CHAR            shift, and go to state 2
    FLOAT           shift, and go to state 3
    DOUBLE          shift, and go to state 4
    VOID            shift, and go to state 5
    SIGNED          shift, and go to state 6
    UNSIGNED        shift, and go to state 7
    LONG            shift, and go to state 8
    SHORT           shift, and go to state 9
    CONST           shift, and go to state 10
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    $default  reduce using rule 123 (statement_declaration_list)

    declaration                 go to state 158
    declaration_specifiers      go to state 159
    type_specifier              go to state 17
    LITERAL                     go to state 65
    scalar_decl                 go to state 18
    func_decl                   go to state 19
    array_decl                  go to state 20
    primary_expression          go to state 66
    suffix_expression           go to state 67
    prefix_expression           go to state 68
    multiplicative_expression   go to state 69
    additive_expression         go to state 70
    relational_expression       go to state 71
    equality_expression         go to state 72
    assignment_expression       go to state 73
    expression                  go to state 160
    statement                   go to state 161
    digitalwrite_stmt           go to state 162
    delay_stmt                  go to state 163
    expression_statement        go to state 164
    selection_statement         go to state 165
    if_statement                go to state 166
    iteration_statement         go to state 167
    while_statement             go to state 168
    do_while_statement          go to state 169
    for_statement               go to state 170
    jump_statement              go to state 171
    break_statement             go to state 172
    return_statement            go to state 173
    compound_statement          go to state 174
    statement_declaration_list  go to state 194


State 159

   30 scalar_decl: declaration_specifiers . scalar_init_declarator_list SEMICOLON
   37 func_decl: declaration_specifiers . func_init_declarator_list SEMICOLON
   49 array_decl: declaration_specifiers . array_init_declarator_list SEMICOLON

    MULTIPLY    shift, and go to state 24
    IDENTIFIER  shift, and go to state 195

    scalar_init_declarator_list  go to state 26
    scalar_init_declarator       go to state 27
    scalar_declarator            go to state 28
    func_init_declarator_list    go to state 29
    func_init_declarator         go to state 30
    func_declarator              go to state 31
    func_direct_declarator       go to state 32
    array_init_declarator_list   go to state 33
    array_init_declarator        go to state 34
    array_declarator             go to state 35


State 160

  104 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 196


State 161

  121 statement_declaration_list: statement .
  122                           | statement . statement_declaration_list

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    DIGITALWRITE    shift, and go to state 149
    DELAY           shift, and go to state 150
    IF              shift, and go to state 151
    WHILE           shift, and go to state 152
    DO              shift, and go to state 153
    FOR             shift, and go to state 154
    RETURN          shift, and go to state 155
    BREAK           shift, and go to state 156
    L_BRACKET       shift, and go to state 59
    L_PARENTHESIS   shift, and go to state 122
    INT             shift, and go to state 1
    CHAR            shift, and go to state 2
    FLOAT           shift, and go to state 3
    DOUBLE          shift, and go to state 4
    VOID            shift, and go to state 5
    SIGNED          shift, and go to state 6
    UNSIGNED        shift, and go to state 7
    LONG            shift, and go to state 8
    SHORT           shift, and go to state 9
    CONST           shift, and go to state 10
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    $default  reduce using rule 121 (statement_declaration_list)

    declaration                 go to state 158
    declaration_specifiers      go to state 159
    type_specifier              go to state 17
    LITERAL                     go to state 65
    scalar_decl                 go to state 18
    func_decl                   go to state 19
    array_decl                  go to state 20
    primary_expression          go to state 66
    suffix_expression           go to state 67
    prefix_expression           go to state 68
    multiplicative_expression   go to state 69
    additive_expression         go to state 70
    relational_expression       go to state 71
    equality_expression         go to state 72
    assignment_expression       go to state 73
    expression                  go to state 160
    statement                   go to state 161
    digitalwrite_stmt           go to state 162
    delay_stmt                  go to state 163
    expression_statement        go to state 164
    selection_statement         go to state 165
    if_statement                go to state 166
    iteration_statement         go to state 167
    while_statement             go to state 168
    do_while_statement          go to state 169
    for_statement               go to state 170
    jump_statement              go to state 171
    break_statement             go to state 172
    return_statement            go to state 173
    compound_statement          go to state 174
    statement_declaration_list  go to state 197


State 162

  101 statement: digitalwrite_stmt .

    $default  reduce using rule 101 (statement)


State 163

  100 statement: delay_stmt .

    $default  reduce using rule 100 (statement)


State 164

   95 statement: expression_statement .

    $default  reduce using rule 95 (statement)


State 165

   96 statement: selection_statement .

    $default  reduce using rule 96 (statement)


State 166

  105 selection_statement: if_statement .

    $default  reduce using rule 105 (selection_statement)


State 167

   97 statement: iteration_statement .

    $default  reduce using rule 97 (statement)


State 168

  108 iteration_statement: while_statement .

    $default  reduce using rule 108 (iteration_statement)


State 169

  109 iteration_statement: do_while_statement .

    $default  reduce using rule 109 (iteration_statement)


State 170

  110 iteration_statement: for_statement .

    $default  reduce using rule 110 (iteration_statement)


State 171

   98 statement: jump_statement .

    $default  reduce using rule 98 (statement)


State 172

  114 jump_statement: break_statement .

    $default  reduce using rule 114 (jump_statement)


State 173

  115 jump_statement: return_statement .

    $default  reduce using rule 115 (jump_statement)


State 174

   99 statement: compound_statement .

    $default  reduce using rule 99 (statement)


State 175

  120 compound_statement: L_PARENTHESIS statement_declaration_list . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 198


State 176

    7 function_definition: declaration_specifiers IDENTIFIER L_BRACKET parameter_list R_BRACKET $@1 compound_statement .

    $default  reduce using rule 7 (function_definition)


State 177

   65 primary_expression: IDENTIFIER L_SQ_BRACKET expression . R_SQ_BRACKET

    R_SQ_BRACKET  shift, and go to state 199


State 178

   92 assignment_expression: MULTIPLY IDENTIFIER ASSIGN assignment_expression .

    $default  reduce using rule 92 (assignment_expression)


State 179

   65 primary_expression: IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET .
   93 assignment_expression: IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET . ASSIGN assignment_expression

    ASSIGN  shift, and go to state 200

    $default  reduce using rule 65 (primary_expression)


State 180

   70 suffix_expression: suffix_expression L_BRACKET argument_expression_list R_BRACKET .

    $default  reduce using rule 70 (suffix_expression)


State 181

   67 argument_expression_list: assignment_expression COMMA . argument_expression_list

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    argument_expression_list   go to state 201
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 133


State 182

   57 array_content: L_PARENTHESIS array_content COMMA array_content . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 202


State 183

   58 array_content: L_PARENTHESIS array_content COMMA array_expression . R_PARENTHESIS
   61 array_expression: array_expression . COMMA expression

    COMMA          shift, and go to state 147
    R_PARENTHESIS  shift, and go to state 203


State 184

   61 array_expression: array_expression COMMA expression .

    $default  reduce using rule 61 (array_expression)


State 185

  102 digitalwrite_stmt: DIGITALWRITE L_BRACKET . INT_LITERAL COMMA DVALUE R_BRACKET SEMICOLON

    INT_LITERAL  shift, and go to state 204


State 186

  103 delay_stmt: DELAY L_BRACKET . expression R_BRACKET SEMICOLON

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 205


State 187

  106 if_statement: IF L_BRACKET . expression R_BRACKET compound_statement
  107             | IF L_BRACKET . expression R_BRACKET compound_statement ELSE compound_statement

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 206


State 188

  111 while_statement: WHILE L_BRACKET . expression R_BRACKET statement

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 207


State 189

  112 do_while_statement: DO statement . WHILE L_BRACKET expression R_BRACKET SEMICOLON

    WHILE  shift, and go to state 208


State 190

  113 for_statement: FOR L_BRACKET . expression SEMICOLON expression SEMICOLON expression R_BRACKET statement

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 209


State 191

  117 return_statement: RETURN SEMICOLON .

    $default  reduce using rule 117 (return_statement)


State 192

  118 return_statement: RETURN expression . SEMICOLON

    SEMICOLON  shift, and go to state 210


State 193

  116 break_statement: BREAK SEMICOLON .

    $default  reduce using rule 116 (break_statement)


State 194

  124 statement_declaration_list: declaration statement_declaration_list .

    $default  reduce using rule 124 (statement_declaration_list)


State 195

   35 scalar_declarator: IDENTIFIER .
   44 func_direct_declarator: IDENTIFIER . L_BRACKET R_BRACKET
   45                       | IDENTIFIER . L_BRACKET parameter_list R_BRACKET
   54 array_declarator: IDENTIFIER . L_SQ_BRACKET expression R_SQ_BRACKET

    L_BRACKET     shift, and go to state 51
    L_SQ_BRACKET  shift, and go to state 40

    $default  reduce using rule 35 (scalar_declarator)


State 196

  104 expression_statement: expression SEMICOLON .

    $default  reduce using rule 104 (expression_statement)


State 197

  122 statement_declaration_list: statement statement_declaration_list .

    $default  reduce using rule 122 (statement_declaration_list)


State 198

  120 compound_statement: L_PARENTHESIS statement_declaration_list R_PARENTHESIS .

    $default  reduce using rule 120 (compound_statement)


State 199

   65 primary_expression: IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET .

    $default  reduce using rule 65 (primary_expression)


State 200

   93 assignment_expression: IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET ASSIGN . assignment_expression

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 211


State 201

   67 argument_expression_list: assignment_expression COMMA argument_expression_list .

    $default  reduce using rule 67 (argument_expression_list)


State 202

   57 array_content: L_PARENTHESIS array_content COMMA array_content R_PARENTHESIS .

    $default  reduce using rule 57 (array_content)


State 203

   58 array_content: L_PARENTHESIS array_content COMMA array_expression R_PARENTHESIS .

    $default  reduce using rule 58 (array_content)


State 204

  102 digitalwrite_stmt: DIGITALWRITE L_BRACKET INT_LITERAL . COMMA DVALUE R_BRACKET SEMICOLON

    COMMA  shift, and go to state 212


State 205

  103 delay_stmt: DELAY L_BRACKET expression . R_BRACKET SEMICOLON

    R_BRACKET  shift, and go to state 213


State 206

  106 if_statement: IF L_BRACKET expression . R_BRACKET compound_statement
  107             | IF L_BRACKET expression . R_BRACKET compound_statement ELSE compound_statement

    R_BRACKET  shift, and go to state 214


State 207

  111 while_statement: WHILE L_BRACKET expression . R_BRACKET statement

    R_BRACKET  shift, and go to state 215


State 208

  112 do_while_statement: DO statement WHILE . L_BRACKET expression R_BRACKET SEMICOLON

    L_BRACKET  shift, and go to state 216


State 209

  113 for_statement: FOR L_BRACKET expression . SEMICOLON expression SEMICOLON expression R_BRACKET statement

    SEMICOLON  shift, and go to state 217


State 210

  118 return_statement: RETURN expression SEMICOLON .

    $default  reduce using rule 118 (return_statement)


State 211

   93 assignment_expression: IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET ASSIGN assignment_expression .

    $default  reduce using rule 93 (assignment_expression)


State 212

  102 digitalwrite_stmt: DIGITALWRITE L_BRACKET INT_LITERAL COMMA . DVALUE R_BRACKET SEMICOLON

    DVALUE  shift, and go to state 218


State 213

  103 delay_stmt: DELAY L_BRACKET expression R_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 219


State 214

  106 if_statement: IF L_BRACKET expression R_BRACKET . compound_statement
  107             | IF L_BRACKET expression R_BRACKET . compound_statement ELSE compound_statement

    L_PARENTHESIS  shift, and go to state 122

    compound_statement  go to state 220


State 215

  111 while_statement: WHILE L_BRACKET expression R_BRACKET . statement

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    DIGITALWRITE    shift, and go to state 149
    DELAY           shift, and go to state 150
    IF              shift, and go to state 151
    WHILE           shift, and go to state 152
    DO              shift, and go to state 153
    FOR             shift, and go to state 154
    RETURN          shift, and go to state 155
    BREAK           shift, and go to state 156
    L_BRACKET       shift, and go to state 59
    L_PARENTHESIS   shift, and go to state 122
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 160
    statement                  go to state 221
    digitalwrite_stmt          go to state 162
    delay_stmt                 go to state 163
    expression_statement       go to state 164
    selection_statement        go to state 165
    if_statement               go to state 166
    iteration_statement        go to state 167
    while_statement            go to state 168
    do_while_statement         go to state 169
    for_statement              go to state 170
    jump_statement             go to state 171
    break_statement            go to state 172
    return_statement           go to state 173
    compound_statement         go to state 174


State 216

  112 do_while_statement: DO statement WHILE L_BRACKET . expression R_BRACKET SEMICOLON

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 222


State 217

  113 for_statement: FOR L_BRACKET expression SEMICOLON . expression SEMICOLON expression R_BRACKET statement

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 223


State 218

  102 digitalwrite_stmt: DIGITALWRITE L_BRACKET INT_LITERAL COMMA DVALUE . R_BRACKET SEMICOLON

    R_BRACKET  shift, and go to state 224


State 219

  103 delay_stmt: DELAY L_BRACKET expression R_BRACKET SEMICOLON .

    $default  reduce using rule 103 (delay_stmt)


State 220

  106 if_statement: IF L_BRACKET expression R_BRACKET compound_statement .
  107             | IF L_BRACKET expression R_BRACKET compound_statement . ELSE compound_statement

    ELSE  shift, and go to state 225

    $default  reduce using rule 106 (if_statement)


State 221

  111 while_statement: WHILE L_BRACKET expression R_BRACKET statement .

    $default  reduce using rule 111 (while_statement)


State 222

  112 do_while_statement: DO statement WHILE L_BRACKET expression . R_BRACKET SEMICOLON

    R_BRACKET  shift, and go to state 226


State 223

  113 for_statement: FOR L_BRACKET expression SEMICOLON expression . SEMICOLON expression R_BRACKET statement

    SEMICOLON  shift, and go to state 227


State 224

  102 digitalwrite_stmt: DIGITALWRITE L_BRACKET INT_LITERAL COMMA DVALUE R_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 228


State 225

  107 if_statement: IF L_BRACKET expression R_BRACKET compound_statement ELSE . compound_statement

    L_PARENTHESIS  shift, and go to state 122

    compound_statement  go to state 229


State 226

  112 do_while_statement: DO statement WHILE L_BRACKET expression R_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 230


State 227

  113 for_statement: FOR L_BRACKET expression SEMICOLON expression SEMICOLON . expression R_BRACKET statement

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    L_BRACKET       shift, and go to state 59
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 231


State 228

  102 digitalwrite_stmt: DIGITALWRITE L_BRACKET INT_LITERAL COMMA DVALUE R_BRACKET SEMICOLON .

    $default  reduce using rule 102 (digitalwrite_stmt)


State 229

  107 if_statement: IF L_BRACKET expression R_BRACKET compound_statement ELSE compound_statement .

    $default  reduce using rule 107 (if_statement)


State 230

  112 do_while_statement: DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .

    $default  reduce using rule 112 (do_while_statement)


State 231

  113 for_statement: FOR L_BRACKET expression SEMICOLON expression SEMICOLON expression . R_BRACKET statement

    R_BRACKET  shift, and go to state 232


State 232

  113 for_statement: FOR L_BRACKET expression SEMICOLON expression SEMICOLON expression R_BRACKET . statement

    MINUS           shift, and go to state 56
    MULTIPLY        shift, and go to state 57
    AND_OP          shift, and go to state 58
    DIGITALWRITE    shift, and go to state 149
    DELAY           shift, and go to state 150
    IF              shift, and go to state 151
    WHILE           shift, and go to state 152
    DO              shift, and go to state 153
    FOR             shift, and go to state 154
    RETURN          shift, and go to state 155
    BREAK           shift, and go to state 156
    L_BRACKET       shift, and go to state 59
    L_PARENTHESIS   shift, and go to state 122
    IDENTIFIER      shift, and go to state 60
    CHAR_LITERAL    shift, and go to state 61
    STRING_LITERAL  shift, and go to state 62
    INT_LITERAL     shift, and go to state 63
    FLOAT_LITERAL   shift, and go to state 64

    LITERAL                    go to state 65
    primary_expression         go to state 66
    suffix_expression          go to state 67
    prefix_expression          go to state 68
    multiplicative_expression  go to state 69
    additive_expression        go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    assignment_expression      go to state 73
    expression                 go to state 160
    statement                  go to state 233
    digitalwrite_stmt          go to state 162
    delay_stmt                 go to state 163
    expression_statement       go to state 164
    selection_statement        go to state 165
    if_statement               go to state 166
    iteration_statement        go to state 167
    while_statement            go to state 168
    do_while_statement         go to state 169
    for_statement              go to state 170
    jump_statement             go to state 171
    break_statement            go to state 172
    return_statement           go to state 173
    compound_statement         go to state 174


State 233

  113 for_statement: FOR L_BRACKET expression SEMICOLON expression SEMICOLON expression R_BRACKET statement .

    $default  reduce using rule 113 (for_statement)
