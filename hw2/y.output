Terminals unused in grammar

    COLON


State 63 conflicts: 1 shift/reduce
State 172 conflicts: 1 shift/reduce
State 182 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: trans_unit

    2 trans_unit: extern_decl
    3           | trans_unit extern_decl

    4 extern_decl: declaration

    5 declaration: scalar_decl
    6            | array_decl
    7            | func_decl

    8 declaration_specifiers: type_specifier
    9                       | type_specifier declaration_specifiers
   10                       | CONST
   11                       | CONST declaration_specifiers

   12 type_specifier: INT
   13               | CHAR
   14               | FLOAT
   15               | DOUBLE
   16               | VOID
   17               | SIGNED
   18               | UNSIGNED
   19               | LONG
   20               | SHORT

   21 scalar_decl: declaration_specifiers scalar_init_declarator_list SEMICOLON

   22 scalar_init_declarator_list: scalar_init_declarator
   23                            | scalar_init_declarator COMMA scalar_init_declarator_list

   24 scalar_init_declarator: scalar_declarator
   25                       | scalar_declarator ASSIGN expression

   26 scalar_declarator: IDENTIFIER
   27                  | MULTIPLY IDENTIFIER

   28 func_decl: declaration_specifiers func_init_declarator_list SEMICOLON

   29 func_init_declarator_list: func_init_declarator
   30                          | func_init_declarator COMMA func_init_declarator_list

   31 func_init_declarator: func_declarator
   32                     | func_declarator ASSIGN expression

   33 func_declarator: func_direct_declarator
   34                | MULTIPLY func_direct_declarator

   35 func_direct_declarator: IDENTIFIER L_BRACKET R_BRACKET
   36                       | IDENTIFIER L_BRACKET parameter_list R_BRACKET

   37 parameter_list: parameter_declaration
   38               | parameter_declaration COMMA parameter_list

   39 parameter_declaration: declaration_specifiers scalar_declarator

   40 array_decl: declaration_specifiers array_init_declarator_list SEMICOLON

   41 array_init_declarator_list: array_init_declarator
   42                           | array_init_declarator COMMA array_init_declarator_list

   43 array_init_declarator: array_declarator
   44                      | array_declarator ASSIGN array_content

   45 array_declarator: IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET
   46                 | array_declarator L_SQ_BRACKET expression R_SQ_BRACKET

   47 array_content: L_PARENTHESIS array_expression R_PARENTHESIS
   48              | L_PARENTHESIS array_content COMMA array_content R_PARENTHESIS
   49              | L_PARENTHESIS array_content R_PARENTHESIS

   50 array_expression: expression
   51                 | array_expression COMMA expression

   52 primary_expression: IDENTIFIER
   53                   | LITERAL
   54                   | L_BRACKET expression R_BRACKET

   55 multidim_arr_list: L_SQ_BRACKET expression L_SQ_BRACKET
   56                  | L_SQ_BRACKET expression L_SQ_BRACKET multidim_arr_list

   57 argument_expression_list: assignment_expression
   58                         | assignment_expression COMMA argument_expression_list

   59 type_name: specifier_qualifier_list
   60          | specifier_qualifier_list MULTIPLY

   61 specifier_qualifier_list: CONST
   62                         | CONST specifier_qualifier_list
   63                         | type_specifier
   64                         | type_specifier specifier_qualifier_list

   65 suffix_expression: primary_expression
   66                  | suffix_expression INC
   67                  | suffix_expression DEC
   68                  | suffix_expression L_BRACKET R_BRACKET
   69                  | suffix_expression L_BRACKET argument_expression_list R_BRACKET
   70                  | IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET
   71                  | IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET multidim_arr_list

   72 prefix_expression: suffix_expression
   73                  | INC prefix_expression
   74                  | DEC prefix_expression
   75                  | ADD prefix_expression
   76                  | MINUS prefix_expression
   77                  | LOGICAL_NOT prefix_expression
   78                  | BITWISE_NOT prefix_expression
   79                  | MULTIPLY prefix_expression
   80                  | AND_OP prefix_expression
   81                  | L_BRACKET type_name R_BRACKET prefix_expression

   82 multiplicative_expression: prefix_expression
   83                          | multiplicative_expression MULTIPLY prefix_expression
   84                          | multiplicative_expression DIVIDE prefix_expression
   85                          | multiplicative_expression MOD prefix_expression

   86 additive_expression: multiplicative_expression
   87                    | additive_expression ADD multiplicative_expression
   88                    | additive_expression MINUS multiplicative_expression

   89 shift_expression: additive_expression
   90                 | shift_expression SHIFT_LEFT additive_expression
   91                 | shift_expression SHIFT_RIGHT additive_expression

   92 relational_expression: shift_expression
   93                      | relational_expression LESS_THAN shift_expression
   94                      | relational_expression LESS_OR_EQUAL_THAN shift_expression
   95                      | relational_expression GREATER_THAN shift_expression
   96                      | relational_expression GREATER_OR_EQUAL_THAN shift_expression

   97 equality_expression: relational_expression
   98                    | equality_expression EQUAL relational_expression
   99                    | equality_expression NOT_EQUAL relational_expression

  100 bitwise_and_expression: equality_expression
  101                       | bitwise_and_expression AND_OP equality_expression

  102 bitwise_xor_expression: bitwise_and_expression
  103                       | bitwise_xor_expression XOR_OP bitwise_and_expression

  104 bitwise_or_expression: bitwise_xor_expression
  105                      | bitwise_or_expression OR_OP bitwise_xor_expression

  106 logical_and_expression: bitwise_or_expression
  107                       | logical_and_expression AND bitwise_or_expression

  108 logical_or_expression: logical_and_expression
  109                      | logical_or_expression OR logical_and_expression

  110 assignment_expression: logical_or_expression
  111                      | logical_or_expression ASSIGN assignment_expression

  112 expression: assignment_expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INC <stringval> (258) 66 73
    DEC <stringval> (259) 67 74
    LESS_OR_EQUAL_THAN <stringval> (260) 94
    GREATER_OR_EQUAL_THAN <stringval> (261) 96
    SHIFT_LEFT <stringval> (262) 90
    SHIFT_RIGHT <stringval> (263) 91
    EQUAL <stringval> (264) 98
    NOT_EQUAL <stringval> (265) 99
    AND <stringval> (266) 107
    OR <stringval> (267) 109
    ADD <stringval> (268) 75 87
    MINUS <stringval> (269) 76 88
    MULTIPLY <stringval> (270) 27 34 60 79 83
    DIVIDE <stringval> (271) 84
    MOD <stringval> (272) 85
    LOGICAL_NOT <stringval> (273) 77
    BITWISE_NOT <stringval> (274) 78
    LESS_THAN <stringval> (275) 93
    GREATER_THAN <stringval> (276) 95
    AND_OP <stringval> (277) 80 101
    OR_OP <stringval> (278) 105
    XOR_OP <stringval> (279) 103
    ASSIGN <stringval> (280) 25 32 44 111
    SEMICOLON <stringval> (281) 21 28 40
    COMMA <stringval> (282) 23 30 38 42 48 51 58
    COLON <stringval> (283)
    L_BRACKET <stringval> (284) 35 36 54 68 69 81
    R_BRACKET <stringval> (285) 35 36 54 68 69 81
    L_SQ_BRACKET <stringval> (286) 45 46 55 56 70 71
    R_SQ_BRACKET <stringval> (287) 45 46 70 71
    L_PARENTHESIS <stringval> (288) 47 48 49
    R_PARENTHESIS <stringval> (289) 47 48 49
    INT <stringval> (290) 12
    CHAR <stringval> (291) 13
    FLOAT <stringval> (292) 14
    DOUBLE <stringval> (293) 15
    VOID <stringval> (294) 16
    SIGNED <stringval> (295) 17
    UNSIGNED <stringval> (296) 18
    LONG <stringval> (297) 19
    SHORT <stringval> (298) 20
    CONST <stringval> (299) 10 11 61 62
    IDENTIFIER <stringval> (300) 26 27 35 36 45 52 70 71
    LITERAL <stringval> (301) 53


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    program (48)
        on left: 1
        on right: 0
    trans_unit <stringval> (49)
        on left: 2 3
        on right: 1 3
    extern_decl <stringval> (50)
        on left: 4
        on right: 2 3
    declaration <stringval> (51)
        on left: 5 6 7
        on right: 4
    declaration_specifiers <stringval> (52)
        on left: 8 9 10 11
        on right: 9 11 21 28 39 40
    type_specifier <stringval> (53)
        on left: 12 13 14 15 16 17 18 19 20
        on right: 8 9 63 64
    scalar_decl <stringval> (54)
        on left: 21
        on right: 5
    scalar_init_declarator_list <stringval> (55)
        on left: 22 23
        on right: 21 23
    scalar_init_declarator <stringval> (56)
        on left: 24 25
        on right: 22 23
    scalar_declarator <stringval> (57)
        on left: 26 27
        on right: 24 25 39
    func_decl <stringval> (58)
        on left: 28
        on right: 7
    func_init_declarator_list <stringval> (59)
        on left: 29 30
        on right: 28 30
    func_init_declarator <stringval> (60)
        on left: 31 32
        on right: 29 30
    func_declarator <stringval> (61)
        on left: 33 34
        on right: 31 32
    func_direct_declarator <stringval> (62)
        on left: 35 36
        on right: 33 34
    parameter_list <stringval> (63)
        on left: 37 38
        on right: 36 38
    parameter_declaration <stringval> (64)
        on left: 39
        on right: 37 38
    array_decl <stringval> (65)
        on left: 40
        on right: 6
    array_init_declarator_list <stringval> (66)
        on left: 41 42
        on right: 40 42
    array_init_declarator <stringval> (67)
        on left: 43 44
        on right: 41 42
    array_declarator <stringval> (68)
        on left: 45 46
        on right: 43 44 46
    array_content <stringval> (69)
        on left: 47 48 49
        on right: 44 48 49
    array_expression <stringval> (70)
        on left: 50 51
        on right: 47 51
    primary_expression <stringval> (71)
        on left: 52 53 54
        on right: 65
    multidim_arr_list <stringval> (72)
        on left: 55 56
        on right: 56 71
    argument_expression_list (73)
        on left: 57 58
        on right: 58 69
    type_name (74)
        on left: 59 60
        on right: 81
    specifier_qualifier_list (75)
        on left: 61 62 63 64
        on right: 59 60 62 64
    suffix_expression <stringval> (76)
        on left: 65 66 67 68 69 70 71
        on right: 66 67 68 69 72
    prefix_expression (77)
        on left: 72 73 74 75 76 77 78 79 80 81
        on right: 73 74 75 76 77 78 79 80 81 82 83 84 85
    multiplicative_expression (78)
        on left: 82 83 84 85
        on right: 83 84 85 86 87 88
    additive_expression (79)
        on left: 86 87 88
        on right: 87 88 89 90 91
    shift_expression (80)
        on left: 89 90 91
        on right: 90 91 92 93 94 95 96
    relational_expression (81)
        on left: 92 93 94 95 96
        on right: 93 94 95 96 97 98 99
    equality_expression (82)
        on left: 97 98 99
        on right: 98 99 100 101
    bitwise_and_expression (83)
        on left: 100 101
        on right: 101 102 103
    bitwise_xor_expression (84)
        on left: 102 103
        on right: 103 104 105
    bitwise_or_expression (85)
        on left: 104 105
        on right: 105 106 107
    logical_and_expression (86)
        on left: 106 107
        on right: 107 108 109
    logical_or_expression (87)
        on left: 108 109
        on right: 109 110 111
    assignment_expression (88)
        on left: 110 111
        on right: 57 58 111 112
    expression <stringval> (89)
        on left: 112
        on right: 25 32 45 46 50 51 54 55 56 70 71


State 0

    0 $accept: . program $end

    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    FLOAT     shift, and go to state 3
    DOUBLE    shift, and go to state 4
    VOID      shift, and go to state 5
    SIGNED    shift, and go to state 6
    UNSIGNED  shift, and go to state 7
    LONG      shift, and go to state 8
    SHORT     shift, and go to state 9
    CONST     shift, and go to state 10

    program                 go to state 11
    trans_unit              go to state 12
    extern_decl             go to state 13
    declaration             go to state 14
    declaration_specifiers  go to state 15
    type_specifier          go to state 16
    scalar_decl             go to state 17
    func_decl               go to state 18
    array_decl              go to state 19


State 1

   12 type_specifier: INT .

    $default  reduce using rule 12 (type_specifier)


State 2

   13 type_specifier: CHAR .

    $default  reduce using rule 13 (type_specifier)


State 3

   14 type_specifier: FLOAT .

    $default  reduce using rule 14 (type_specifier)


State 4

   15 type_specifier: DOUBLE .

    $default  reduce using rule 15 (type_specifier)


State 5

   16 type_specifier: VOID .

    $default  reduce using rule 16 (type_specifier)


State 6

   17 type_specifier: SIGNED .

    $default  reduce using rule 17 (type_specifier)


State 7

   18 type_specifier: UNSIGNED .

    $default  reduce using rule 18 (type_specifier)


State 8

   19 type_specifier: LONG .

    $default  reduce using rule 19 (type_specifier)


State 9

   20 type_specifier: SHORT .

    $default  reduce using rule 20 (type_specifier)


State 10

   10 declaration_specifiers: CONST .
   11                       | CONST . declaration_specifiers

    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    FLOAT     shift, and go to state 3
    DOUBLE    shift, and go to state 4
    VOID      shift, and go to state 5
    SIGNED    shift, and go to state 6
    UNSIGNED  shift, and go to state 7
    LONG      shift, and go to state 8
    SHORT     shift, and go to state 9
    CONST     shift, and go to state 10

    $default  reduce using rule 10 (declaration_specifiers)

    declaration_specifiers  go to state 20
    type_specifier          go to state 16


State 11

    0 $accept: program . $end

    $end  shift, and go to state 21


State 12

    1 program: trans_unit .
    3 trans_unit: trans_unit . extern_decl

    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    FLOAT     shift, and go to state 3
    DOUBLE    shift, and go to state 4
    VOID      shift, and go to state 5
    SIGNED    shift, and go to state 6
    UNSIGNED  shift, and go to state 7
    LONG      shift, and go to state 8
    SHORT     shift, and go to state 9
    CONST     shift, and go to state 10

    $default  reduce using rule 1 (program)

    extern_decl             go to state 22
    declaration             go to state 14
    declaration_specifiers  go to state 15
    type_specifier          go to state 16
    scalar_decl             go to state 17
    func_decl               go to state 18
    array_decl              go to state 19


State 13

    2 trans_unit: extern_decl .

    $default  reduce using rule 2 (trans_unit)


State 14

    4 extern_decl: declaration .

    $default  reduce using rule 4 (extern_decl)


State 15

   21 scalar_decl: declaration_specifiers . scalar_init_declarator_list SEMICOLON
   28 func_decl: declaration_specifiers . func_init_declarator_list SEMICOLON
   40 array_decl: declaration_specifiers . array_init_declarator_list SEMICOLON

    MULTIPLY    shift, and go to state 23
    IDENTIFIER  shift, and go to state 24

    scalar_init_declarator_list  go to state 25
    scalar_init_declarator       go to state 26
    scalar_declarator            go to state 27
    func_init_declarator_list    go to state 28
    func_init_declarator         go to state 29
    func_declarator              go to state 30
    func_direct_declarator       go to state 31
    array_init_declarator_list   go to state 32
    array_init_declarator        go to state 33
    array_declarator             go to state 34


State 16

    8 declaration_specifiers: type_specifier .
    9                       | type_specifier . declaration_specifiers

    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    FLOAT     shift, and go to state 3
    DOUBLE    shift, and go to state 4
    VOID      shift, and go to state 5
    SIGNED    shift, and go to state 6
    UNSIGNED  shift, and go to state 7
    LONG      shift, and go to state 8
    SHORT     shift, and go to state 9
    CONST     shift, and go to state 10

    $default  reduce using rule 8 (declaration_specifiers)

    declaration_specifiers  go to state 35
    type_specifier          go to state 16


State 17

    5 declaration: scalar_decl .

    $default  reduce using rule 5 (declaration)


State 18

    7 declaration: func_decl .

    $default  reduce using rule 7 (declaration)


State 19

    6 declaration: array_decl .

    $default  reduce using rule 6 (declaration)


State 20

   11 declaration_specifiers: CONST declaration_specifiers .

    $default  reduce using rule 11 (declaration_specifiers)


State 21

    0 $accept: program $end .

    $default  accept


State 22

    3 trans_unit: trans_unit extern_decl .

    $default  reduce using rule 3 (trans_unit)


State 23

   27 scalar_declarator: MULTIPLY . IDENTIFIER
   34 func_declarator: MULTIPLY . func_direct_declarator

    IDENTIFIER  shift, and go to state 36

    func_direct_declarator  go to state 37


State 24

   26 scalar_declarator: IDENTIFIER .
   35 func_direct_declarator: IDENTIFIER . L_BRACKET R_BRACKET
   36                       | IDENTIFIER . L_BRACKET parameter_list R_BRACKET
   45 array_declarator: IDENTIFIER . L_SQ_BRACKET expression R_SQ_BRACKET

    L_BRACKET     shift, and go to state 38
    L_SQ_BRACKET  shift, and go to state 39

    $default  reduce using rule 26 (scalar_declarator)


State 25

   21 scalar_decl: declaration_specifiers scalar_init_declarator_list . SEMICOLON

    SEMICOLON  shift, and go to state 40


State 26

   22 scalar_init_declarator_list: scalar_init_declarator .
   23                            | scalar_init_declarator . COMMA scalar_init_declarator_list

    COMMA  shift, and go to state 41

    $default  reduce using rule 22 (scalar_init_declarator_list)


State 27

   24 scalar_init_declarator: scalar_declarator .
   25                       | scalar_declarator . ASSIGN expression

    ASSIGN  shift, and go to state 42

    $default  reduce using rule 24 (scalar_init_declarator)


State 28

   28 func_decl: declaration_specifiers func_init_declarator_list . SEMICOLON

    SEMICOLON  shift, and go to state 43


State 29

   29 func_init_declarator_list: func_init_declarator .
   30                          | func_init_declarator . COMMA func_init_declarator_list

    COMMA  shift, and go to state 44

    $default  reduce using rule 29 (func_init_declarator_list)


State 30

   31 func_init_declarator: func_declarator .
   32                     | func_declarator . ASSIGN expression

    ASSIGN  shift, and go to state 45

    $default  reduce using rule 31 (func_init_declarator)


State 31

   33 func_declarator: func_direct_declarator .

    $default  reduce using rule 33 (func_declarator)


State 32

   40 array_decl: declaration_specifiers array_init_declarator_list . SEMICOLON

    SEMICOLON  shift, and go to state 46


State 33

   41 array_init_declarator_list: array_init_declarator .
   42                           | array_init_declarator . COMMA array_init_declarator_list

    COMMA  shift, and go to state 47

    $default  reduce using rule 41 (array_init_declarator_list)


State 34

   43 array_init_declarator: array_declarator .
   44                      | array_declarator . ASSIGN array_content
   46 array_declarator: array_declarator . L_SQ_BRACKET expression R_SQ_BRACKET

    ASSIGN        shift, and go to state 48
    L_SQ_BRACKET  shift, and go to state 49

    $default  reduce using rule 43 (array_init_declarator)


State 35

    9 declaration_specifiers: type_specifier declaration_specifiers .

    $default  reduce using rule 9 (declaration_specifiers)


State 36

   27 scalar_declarator: MULTIPLY IDENTIFIER .
   35 func_direct_declarator: IDENTIFIER . L_BRACKET R_BRACKET
   36                       | IDENTIFIER . L_BRACKET parameter_list R_BRACKET

    L_BRACKET  shift, and go to state 38

    $default  reduce using rule 27 (scalar_declarator)


State 37

   34 func_declarator: MULTIPLY func_direct_declarator .

    $default  reduce using rule 34 (func_declarator)


State 38

   35 func_direct_declarator: IDENTIFIER L_BRACKET . R_BRACKET
   36                       | IDENTIFIER L_BRACKET . parameter_list R_BRACKET

    R_BRACKET  shift, and go to state 50
    INT        shift, and go to state 1
    CHAR       shift, and go to state 2
    FLOAT      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    VOID       shift, and go to state 5
    SIGNED     shift, and go to state 6
    UNSIGNED   shift, and go to state 7
    LONG       shift, and go to state 8
    SHORT      shift, and go to state 9
    CONST      shift, and go to state 10

    declaration_specifiers  go to state 51
    type_specifier          go to state 16
    parameter_list          go to state 52
    parameter_declaration   go to state 53


State 39

   45 array_declarator: IDENTIFIER L_SQ_BRACKET . expression R_SQ_BRACKET

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 75
    logical_and_expression     go to state 76
    logical_or_expression      go to state 77
    assignment_expression      go to state 78
    expression                 go to state 79


State 40

   21 scalar_decl: declaration_specifiers scalar_init_declarator_list SEMICOLON .

    $default  reduce using rule 21 (scalar_decl)


State 41

   23 scalar_init_declarator_list: scalar_init_declarator COMMA . scalar_init_declarator_list

    MULTIPLY    shift, and go to state 80
    IDENTIFIER  shift, and go to state 81

    scalar_init_declarator_list  go to state 82
    scalar_init_declarator       go to state 26
    scalar_declarator            go to state 27


State 42

   25 scalar_init_declarator: scalar_declarator ASSIGN . expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 75
    logical_and_expression     go to state 76
    logical_or_expression      go to state 77
    assignment_expression      go to state 78
    expression                 go to state 83


State 43

   28 func_decl: declaration_specifiers func_init_declarator_list SEMICOLON .

    $default  reduce using rule 28 (func_decl)


State 44

   30 func_init_declarator_list: func_init_declarator COMMA . func_init_declarator_list

    MULTIPLY    shift, and go to state 84
    IDENTIFIER  shift, and go to state 85

    func_init_declarator_list  go to state 86
    func_init_declarator       go to state 29
    func_declarator            go to state 30
    func_direct_declarator     go to state 31


State 45

   32 func_init_declarator: func_declarator ASSIGN . expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 75
    logical_and_expression     go to state 76
    logical_or_expression      go to state 77
    assignment_expression      go to state 78
    expression                 go to state 87


State 46

   40 array_decl: declaration_specifiers array_init_declarator_list SEMICOLON .

    $default  reduce using rule 40 (array_decl)


State 47

   42 array_init_declarator_list: array_init_declarator COMMA . array_init_declarator_list

    IDENTIFIER  shift, and go to state 88

    array_init_declarator_list  go to state 89
    array_init_declarator       go to state 33
    array_declarator            go to state 34


State 48

   44 array_init_declarator: array_declarator ASSIGN . array_content

    L_PARENTHESIS  shift, and go to state 90

    array_content  go to state 91


State 49

   46 array_declarator: array_declarator L_SQ_BRACKET . expression R_SQ_BRACKET

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 75
    logical_and_expression     go to state 76
    logical_or_expression      go to state 77
    assignment_expression      go to state 78
    expression                 go to state 92


State 50

   35 func_direct_declarator: IDENTIFIER L_BRACKET R_BRACKET .

    $default  reduce using rule 35 (func_direct_declarator)


State 51

   39 parameter_declaration: declaration_specifiers . scalar_declarator

    MULTIPLY    shift, and go to state 80
    IDENTIFIER  shift, and go to state 81

    scalar_declarator  go to state 93


State 52

   36 func_direct_declarator: IDENTIFIER L_BRACKET parameter_list . R_BRACKET

    R_BRACKET  shift, and go to state 94


State 53

   37 parameter_list: parameter_declaration .
   38               | parameter_declaration . COMMA parameter_list

    COMMA  shift, and go to state 95

    $default  reduce using rule 37 (parameter_list)


State 54

   73 prefix_expression: INC . prefix_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression  go to state 65
    suffix_expression   go to state 66
    prefix_expression   go to state 96


State 55

   74 prefix_expression: DEC . prefix_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression  go to state 65
    suffix_expression   go to state 66
    prefix_expression   go to state 97


State 56

   75 prefix_expression: ADD . prefix_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression  go to state 65
    suffix_expression   go to state 66
    prefix_expression   go to state 98


State 57

   76 prefix_expression: MINUS . prefix_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression  go to state 65
    suffix_expression   go to state 66
    prefix_expression   go to state 99


State 58

   79 prefix_expression: MULTIPLY . prefix_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression  go to state 65
    suffix_expression   go to state 66
    prefix_expression   go to state 100


State 59

   77 prefix_expression: LOGICAL_NOT . prefix_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression  go to state 65
    suffix_expression   go to state 66
    prefix_expression   go to state 101


State 60

   78 prefix_expression: BITWISE_NOT . prefix_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression  go to state 65
    suffix_expression   go to state 66
    prefix_expression   go to state 102


State 61

   80 prefix_expression: AND_OP . prefix_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression  go to state 65
    suffix_expression   go to state 66
    prefix_expression   go to state 103


State 62

   54 primary_expression: L_BRACKET . expression R_BRACKET
   81 prefix_expression: L_BRACKET . type_name R_BRACKET prefix_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    INT          shift, and go to state 1
    CHAR         shift, and go to state 2
    FLOAT        shift, and go to state 3
    DOUBLE       shift, and go to state 4
    VOID         shift, and go to state 5
    SIGNED       shift, and go to state 6
    UNSIGNED     shift, and go to state 7
    LONG         shift, and go to state 8
    SHORT        shift, and go to state 9
    CONST        shift, and go to state 104
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    type_specifier             go to state 105
    primary_expression         go to state 65
    type_name                  go to state 106
    specifier_qualifier_list   go to state 107
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 75
    logical_and_expression     go to state 76
    logical_or_expression      go to state 77
    assignment_expression      go to state 78
    expression                 go to state 108


State 63

   52 primary_expression: IDENTIFIER .
   70 suffix_expression: IDENTIFIER . L_SQ_BRACKET expression R_SQ_BRACKET
   71                  | IDENTIFIER . L_SQ_BRACKET expression R_SQ_BRACKET multidim_arr_list

    L_SQ_BRACKET  shift, and go to state 109

    L_SQ_BRACKET  [reduce using rule 52 (primary_expression)]
    $default      reduce using rule 52 (primary_expression)


State 64

   53 primary_expression: LITERAL .

    $default  reduce using rule 53 (primary_expression)


State 65

   65 suffix_expression: primary_expression .

    $default  reduce using rule 65 (suffix_expression)


State 66

   66 suffix_expression: suffix_expression . INC
   67                  | suffix_expression . DEC
   68                  | suffix_expression . L_BRACKET R_BRACKET
   69                  | suffix_expression . L_BRACKET argument_expression_list R_BRACKET
   72 prefix_expression: suffix_expression .

    INC        shift, and go to state 110
    DEC        shift, and go to state 111
    L_BRACKET  shift, and go to state 112

    $default  reduce using rule 72 (prefix_expression)


State 67

   82 multiplicative_expression: prefix_expression .

    $default  reduce using rule 82 (multiplicative_expression)


State 68

   83 multiplicative_expression: multiplicative_expression . MULTIPLY prefix_expression
   84                          | multiplicative_expression . DIVIDE prefix_expression
   85                          | multiplicative_expression . MOD prefix_expression
   86 additive_expression: multiplicative_expression .

    MULTIPLY  shift, and go to state 113
    DIVIDE    shift, and go to state 114
    MOD       shift, and go to state 115

    $default  reduce using rule 86 (additive_expression)


State 69

   87 additive_expression: additive_expression . ADD multiplicative_expression
   88                    | additive_expression . MINUS multiplicative_expression
   89 shift_expression: additive_expression .

    ADD    shift, and go to state 116
    MINUS  shift, and go to state 117

    $default  reduce using rule 89 (shift_expression)


State 70

   90 shift_expression: shift_expression . SHIFT_LEFT additive_expression
   91                 | shift_expression . SHIFT_RIGHT additive_expression
   92 relational_expression: shift_expression .

    SHIFT_LEFT   shift, and go to state 118
    SHIFT_RIGHT  shift, and go to state 119

    $default  reduce using rule 92 (relational_expression)


State 71

   93 relational_expression: relational_expression . LESS_THAN shift_expression
   94                      | relational_expression . LESS_OR_EQUAL_THAN shift_expression
   95                      | relational_expression . GREATER_THAN shift_expression
   96                      | relational_expression . GREATER_OR_EQUAL_THAN shift_expression
   97 equality_expression: relational_expression .

    LESS_OR_EQUAL_THAN     shift, and go to state 120
    GREATER_OR_EQUAL_THAN  shift, and go to state 121
    LESS_THAN              shift, and go to state 122
    GREATER_THAN           shift, and go to state 123

    $default  reduce using rule 97 (equality_expression)


State 72

   98 equality_expression: equality_expression . EQUAL relational_expression
   99                    | equality_expression . NOT_EQUAL relational_expression
  100 bitwise_and_expression: equality_expression .

    EQUAL      shift, and go to state 124
    NOT_EQUAL  shift, and go to state 125

    $default  reduce using rule 100 (bitwise_and_expression)


State 73

  101 bitwise_and_expression: bitwise_and_expression . AND_OP equality_expression
  102 bitwise_xor_expression: bitwise_and_expression .

    AND_OP  shift, and go to state 126

    $default  reduce using rule 102 (bitwise_xor_expression)


State 74

  103 bitwise_xor_expression: bitwise_xor_expression . XOR_OP bitwise_and_expression
  104 bitwise_or_expression: bitwise_xor_expression .

    XOR_OP  shift, and go to state 127

    $default  reduce using rule 104 (bitwise_or_expression)


State 75

  105 bitwise_or_expression: bitwise_or_expression . OR_OP bitwise_xor_expression
  106 logical_and_expression: bitwise_or_expression .

    OR_OP  shift, and go to state 128

    $default  reduce using rule 106 (logical_and_expression)


State 76

  107 logical_and_expression: logical_and_expression . AND bitwise_or_expression
  108 logical_or_expression: logical_and_expression .

    AND  shift, and go to state 129

    $default  reduce using rule 108 (logical_or_expression)


State 77

  109 logical_or_expression: logical_or_expression . OR logical_and_expression
  110 assignment_expression: logical_or_expression .
  111                      | logical_or_expression . ASSIGN assignment_expression

    OR      shift, and go to state 130
    ASSIGN  shift, and go to state 131

    $default  reduce using rule 110 (assignment_expression)


State 78

  112 expression: assignment_expression .

    $default  reduce using rule 112 (expression)


State 79

   45 array_declarator: IDENTIFIER L_SQ_BRACKET expression . R_SQ_BRACKET

    R_SQ_BRACKET  shift, and go to state 132


State 80

   27 scalar_declarator: MULTIPLY . IDENTIFIER

    IDENTIFIER  shift, and go to state 133


State 81

   26 scalar_declarator: IDENTIFIER .

    $default  reduce using rule 26 (scalar_declarator)


State 82

   23 scalar_init_declarator_list: scalar_init_declarator COMMA scalar_init_declarator_list .

    $default  reduce using rule 23 (scalar_init_declarator_list)


State 83

   25 scalar_init_declarator: scalar_declarator ASSIGN expression .

    $default  reduce using rule 25 (scalar_init_declarator)


State 84

   34 func_declarator: MULTIPLY . func_direct_declarator

    IDENTIFIER  shift, and go to state 85

    func_direct_declarator  go to state 37


State 85

   35 func_direct_declarator: IDENTIFIER . L_BRACKET R_BRACKET
   36                       | IDENTIFIER . L_BRACKET parameter_list R_BRACKET

    L_BRACKET  shift, and go to state 38


State 86

   30 func_init_declarator_list: func_init_declarator COMMA func_init_declarator_list .

    $default  reduce using rule 30 (func_init_declarator_list)


State 87

   32 func_init_declarator: func_declarator ASSIGN expression .

    $default  reduce using rule 32 (func_init_declarator)


State 88

   45 array_declarator: IDENTIFIER . L_SQ_BRACKET expression R_SQ_BRACKET

    L_SQ_BRACKET  shift, and go to state 39


State 89

   42 array_init_declarator_list: array_init_declarator COMMA array_init_declarator_list .

    $default  reduce using rule 42 (array_init_declarator_list)


State 90

   47 array_content: L_PARENTHESIS . array_expression R_PARENTHESIS
   48              | L_PARENTHESIS . array_content COMMA array_content R_PARENTHESIS
   49              | L_PARENTHESIS . array_content R_PARENTHESIS

    INC            shift, and go to state 54
    DEC            shift, and go to state 55
    ADD            shift, and go to state 56
    MINUS          shift, and go to state 57
    MULTIPLY       shift, and go to state 58
    LOGICAL_NOT    shift, and go to state 59
    BITWISE_NOT    shift, and go to state 60
    AND_OP         shift, and go to state 61
    L_BRACKET      shift, and go to state 62
    L_PARENTHESIS  shift, and go to state 90
    IDENTIFIER     shift, and go to state 63
    LITERAL        shift, and go to state 64

    array_content              go to state 134
    array_expression           go to state 135
    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 75
    logical_and_expression     go to state 76
    logical_or_expression      go to state 77
    assignment_expression      go to state 78
    expression                 go to state 136


State 91

   44 array_init_declarator: array_declarator ASSIGN array_content .

    $default  reduce using rule 44 (array_init_declarator)


State 92

   46 array_declarator: array_declarator L_SQ_BRACKET expression . R_SQ_BRACKET

    R_SQ_BRACKET  shift, and go to state 137


State 93

   39 parameter_declaration: declaration_specifiers scalar_declarator .

    $default  reduce using rule 39 (parameter_declaration)


State 94

   36 func_direct_declarator: IDENTIFIER L_BRACKET parameter_list R_BRACKET .

    $default  reduce using rule 36 (func_direct_declarator)


State 95

   38 parameter_list: parameter_declaration COMMA . parameter_list

    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    FLOAT     shift, and go to state 3
    DOUBLE    shift, and go to state 4
    VOID      shift, and go to state 5
    SIGNED    shift, and go to state 6
    UNSIGNED  shift, and go to state 7
    LONG      shift, and go to state 8
    SHORT     shift, and go to state 9
    CONST     shift, and go to state 10

    declaration_specifiers  go to state 51
    type_specifier          go to state 16
    parameter_list          go to state 138
    parameter_declaration   go to state 53


State 96

   73 prefix_expression: INC prefix_expression .

    $default  reduce using rule 73 (prefix_expression)


State 97

   74 prefix_expression: DEC prefix_expression .

    $default  reduce using rule 74 (prefix_expression)


State 98

   75 prefix_expression: ADD prefix_expression .

    $default  reduce using rule 75 (prefix_expression)


State 99

   76 prefix_expression: MINUS prefix_expression .

    $default  reduce using rule 76 (prefix_expression)


State 100

   79 prefix_expression: MULTIPLY prefix_expression .

    $default  reduce using rule 79 (prefix_expression)


State 101

   77 prefix_expression: LOGICAL_NOT prefix_expression .

    $default  reduce using rule 77 (prefix_expression)


State 102

   78 prefix_expression: BITWISE_NOT prefix_expression .

    $default  reduce using rule 78 (prefix_expression)


State 103

   80 prefix_expression: AND_OP prefix_expression .

    $default  reduce using rule 80 (prefix_expression)


State 104

   61 specifier_qualifier_list: CONST .
   62                         | CONST . specifier_qualifier_list

    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    FLOAT     shift, and go to state 3
    DOUBLE    shift, and go to state 4
    VOID      shift, and go to state 5
    SIGNED    shift, and go to state 6
    UNSIGNED  shift, and go to state 7
    LONG      shift, and go to state 8
    SHORT     shift, and go to state 9
    CONST     shift, and go to state 104

    $default  reduce using rule 61 (specifier_qualifier_list)

    type_specifier            go to state 105
    specifier_qualifier_list  go to state 139


State 105

   63 specifier_qualifier_list: type_specifier .
   64                         | type_specifier . specifier_qualifier_list

    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    FLOAT     shift, and go to state 3
    DOUBLE    shift, and go to state 4
    VOID      shift, and go to state 5
    SIGNED    shift, and go to state 6
    UNSIGNED  shift, and go to state 7
    LONG      shift, and go to state 8
    SHORT     shift, and go to state 9
    CONST     shift, and go to state 104

    $default  reduce using rule 63 (specifier_qualifier_list)

    type_specifier            go to state 105
    specifier_qualifier_list  go to state 140


State 106

   81 prefix_expression: L_BRACKET type_name . R_BRACKET prefix_expression

    R_BRACKET  shift, and go to state 141


State 107

   59 type_name: specifier_qualifier_list .
   60          | specifier_qualifier_list . MULTIPLY

    MULTIPLY  shift, and go to state 142

    $default  reduce using rule 59 (type_name)


State 108

   54 primary_expression: L_BRACKET expression . R_BRACKET

    R_BRACKET  shift, and go to state 143


State 109

   70 suffix_expression: IDENTIFIER L_SQ_BRACKET . expression R_SQ_BRACKET
   71                  | IDENTIFIER L_SQ_BRACKET . expression R_SQ_BRACKET multidim_arr_list

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 75
    logical_and_expression     go to state 76
    logical_or_expression      go to state 77
    assignment_expression      go to state 78
    expression                 go to state 144


State 110

   66 suffix_expression: suffix_expression INC .

    $default  reduce using rule 66 (suffix_expression)


State 111

   67 suffix_expression: suffix_expression DEC .

    $default  reduce using rule 67 (suffix_expression)


State 112

   68 suffix_expression: suffix_expression L_BRACKET . R_BRACKET
   69                  | suffix_expression L_BRACKET . argument_expression_list R_BRACKET

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    R_BRACKET    shift, and go to state 145
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    argument_expression_list   go to state 146
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 75
    logical_and_expression     go to state 76
    logical_or_expression      go to state 77
    assignment_expression      go to state 147


State 113

   83 multiplicative_expression: multiplicative_expression MULTIPLY . prefix_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression  go to state 65
    suffix_expression   go to state 66
    prefix_expression   go to state 148


State 114

   84 multiplicative_expression: multiplicative_expression DIVIDE . prefix_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression  go to state 65
    suffix_expression   go to state 66
    prefix_expression   go to state 149


State 115

   85 multiplicative_expression: multiplicative_expression MOD . prefix_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression  go to state 65
    suffix_expression   go to state 66
    prefix_expression   go to state 150


State 116

   87 additive_expression: additive_expression ADD . multiplicative_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 151


State 117

   88 additive_expression: additive_expression MINUS . multiplicative_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 152


State 118

   90 shift_expression: shift_expression SHIFT_LEFT . additive_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 153


State 119

   91 shift_expression: shift_expression SHIFT_RIGHT . additive_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 154


State 120

   94 relational_expression: relational_expression LESS_OR_EQUAL_THAN . shift_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 155


State 121

   96 relational_expression: relational_expression GREATER_OR_EQUAL_THAN . shift_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 156


State 122

   93 relational_expression: relational_expression LESS_THAN . shift_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 157


State 123

   95 relational_expression: relational_expression GREATER_THAN . shift_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 158


State 124

   98 equality_expression: equality_expression EQUAL . relational_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 159


State 125

   99 equality_expression: equality_expression NOT_EQUAL . relational_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 160


State 126

  101 bitwise_and_expression: bitwise_and_expression AND_OP . equality_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 161


State 127

  103 bitwise_xor_expression: bitwise_xor_expression XOR_OP . bitwise_and_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 162


State 128

  105 bitwise_or_expression: bitwise_or_expression OR_OP . bitwise_xor_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 163


State 129

  107 logical_and_expression: logical_and_expression AND . bitwise_or_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 164


State 130

  109 logical_or_expression: logical_or_expression OR . logical_and_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 75
    logical_and_expression     go to state 165


State 131

  111 assignment_expression: logical_or_expression ASSIGN . assignment_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 75
    logical_and_expression     go to state 76
    logical_or_expression      go to state 77
    assignment_expression      go to state 166


State 132

   45 array_declarator: IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET .

    $default  reduce using rule 45 (array_declarator)


State 133

   27 scalar_declarator: MULTIPLY IDENTIFIER .

    $default  reduce using rule 27 (scalar_declarator)


State 134

   48 array_content: L_PARENTHESIS array_content . COMMA array_content R_PARENTHESIS
   49              | L_PARENTHESIS array_content . R_PARENTHESIS

    COMMA          shift, and go to state 167
    R_PARENTHESIS  shift, and go to state 168


State 135

   47 array_content: L_PARENTHESIS array_expression . R_PARENTHESIS
   51 array_expression: array_expression . COMMA expression

    COMMA          shift, and go to state 169
    R_PARENTHESIS  shift, and go to state 170


State 136

   50 array_expression: expression .

    $default  reduce using rule 50 (array_expression)


State 137

   46 array_declarator: array_declarator L_SQ_BRACKET expression R_SQ_BRACKET .

    $default  reduce using rule 46 (array_declarator)


State 138

   38 parameter_list: parameter_declaration COMMA parameter_list .

    $default  reduce using rule 38 (parameter_list)


State 139

   62 specifier_qualifier_list: CONST specifier_qualifier_list .

    $default  reduce using rule 62 (specifier_qualifier_list)


State 140

   64 specifier_qualifier_list: type_specifier specifier_qualifier_list .

    $default  reduce using rule 64 (specifier_qualifier_list)


State 141

   81 prefix_expression: L_BRACKET type_name R_BRACKET . prefix_expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression  go to state 65
    suffix_expression   go to state 66
    prefix_expression   go to state 171


State 142

   60 type_name: specifier_qualifier_list MULTIPLY .

    $default  reduce using rule 60 (type_name)


State 143

   54 primary_expression: L_BRACKET expression R_BRACKET .

    $default  reduce using rule 54 (primary_expression)


State 144

   70 suffix_expression: IDENTIFIER L_SQ_BRACKET expression . R_SQ_BRACKET
   71                  | IDENTIFIER L_SQ_BRACKET expression . R_SQ_BRACKET multidim_arr_list

    R_SQ_BRACKET  shift, and go to state 172


State 145

   68 suffix_expression: suffix_expression L_BRACKET R_BRACKET .

    $default  reduce using rule 68 (suffix_expression)


State 146

   69 suffix_expression: suffix_expression L_BRACKET argument_expression_list . R_BRACKET

    R_BRACKET  shift, and go to state 173


State 147

   57 argument_expression_list: assignment_expression .
   58                         | assignment_expression . COMMA argument_expression_list

    COMMA  shift, and go to state 174

    $default  reduce using rule 57 (argument_expression_list)


State 148

   83 multiplicative_expression: multiplicative_expression MULTIPLY prefix_expression .

    $default  reduce using rule 83 (multiplicative_expression)


State 149

   84 multiplicative_expression: multiplicative_expression DIVIDE prefix_expression .

    $default  reduce using rule 84 (multiplicative_expression)


State 150

   85 multiplicative_expression: multiplicative_expression MOD prefix_expression .

    $default  reduce using rule 85 (multiplicative_expression)


State 151

   83 multiplicative_expression: multiplicative_expression . MULTIPLY prefix_expression
   84                          | multiplicative_expression . DIVIDE prefix_expression
   85                          | multiplicative_expression . MOD prefix_expression
   87 additive_expression: additive_expression ADD multiplicative_expression .

    MULTIPLY  shift, and go to state 113
    DIVIDE    shift, and go to state 114
    MOD       shift, and go to state 115

    $default  reduce using rule 87 (additive_expression)


State 152

   83 multiplicative_expression: multiplicative_expression . MULTIPLY prefix_expression
   84                          | multiplicative_expression . DIVIDE prefix_expression
   85                          | multiplicative_expression . MOD prefix_expression
   88 additive_expression: additive_expression MINUS multiplicative_expression .

    MULTIPLY  shift, and go to state 113
    DIVIDE    shift, and go to state 114
    MOD       shift, and go to state 115

    $default  reduce using rule 88 (additive_expression)


State 153

   87 additive_expression: additive_expression . ADD multiplicative_expression
   88                    | additive_expression . MINUS multiplicative_expression
   90 shift_expression: shift_expression SHIFT_LEFT additive_expression .

    ADD    shift, and go to state 116
    MINUS  shift, and go to state 117

    $default  reduce using rule 90 (shift_expression)


State 154

   87 additive_expression: additive_expression . ADD multiplicative_expression
   88                    | additive_expression . MINUS multiplicative_expression
   91 shift_expression: shift_expression SHIFT_RIGHT additive_expression .

    ADD    shift, and go to state 116
    MINUS  shift, and go to state 117

    $default  reduce using rule 91 (shift_expression)


State 155

   90 shift_expression: shift_expression . SHIFT_LEFT additive_expression
   91                 | shift_expression . SHIFT_RIGHT additive_expression
   94 relational_expression: relational_expression LESS_OR_EQUAL_THAN shift_expression .

    SHIFT_LEFT   shift, and go to state 118
    SHIFT_RIGHT  shift, and go to state 119

    $default  reduce using rule 94 (relational_expression)


State 156

   90 shift_expression: shift_expression . SHIFT_LEFT additive_expression
   91                 | shift_expression . SHIFT_RIGHT additive_expression
   96 relational_expression: relational_expression GREATER_OR_EQUAL_THAN shift_expression .

    SHIFT_LEFT   shift, and go to state 118
    SHIFT_RIGHT  shift, and go to state 119

    $default  reduce using rule 96 (relational_expression)


State 157

   90 shift_expression: shift_expression . SHIFT_LEFT additive_expression
   91                 | shift_expression . SHIFT_RIGHT additive_expression
   93 relational_expression: relational_expression LESS_THAN shift_expression .

    SHIFT_LEFT   shift, and go to state 118
    SHIFT_RIGHT  shift, and go to state 119

    $default  reduce using rule 93 (relational_expression)


State 158

   90 shift_expression: shift_expression . SHIFT_LEFT additive_expression
   91                 | shift_expression . SHIFT_RIGHT additive_expression
   95 relational_expression: relational_expression GREATER_THAN shift_expression .

    SHIFT_LEFT   shift, and go to state 118
    SHIFT_RIGHT  shift, and go to state 119

    $default  reduce using rule 95 (relational_expression)


State 159

   93 relational_expression: relational_expression . LESS_THAN shift_expression
   94                      | relational_expression . LESS_OR_EQUAL_THAN shift_expression
   95                      | relational_expression . GREATER_THAN shift_expression
   96                      | relational_expression . GREATER_OR_EQUAL_THAN shift_expression
   98 equality_expression: equality_expression EQUAL relational_expression .

    LESS_OR_EQUAL_THAN     shift, and go to state 120
    GREATER_OR_EQUAL_THAN  shift, and go to state 121
    LESS_THAN              shift, and go to state 122
    GREATER_THAN           shift, and go to state 123

    $default  reduce using rule 98 (equality_expression)


State 160

   93 relational_expression: relational_expression . LESS_THAN shift_expression
   94                      | relational_expression . LESS_OR_EQUAL_THAN shift_expression
   95                      | relational_expression . GREATER_THAN shift_expression
   96                      | relational_expression . GREATER_OR_EQUAL_THAN shift_expression
   99 equality_expression: equality_expression NOT_EQUAL relational_expression .

    LESS_OR_EQUAL_THAN     shift, and go to state 120
    GREATER_OR_EQUAL_THAN  shift, and go to state 121
    LESS_THAN              shift, and go to state 122
    GREATER_THAN           shift, and go to state 123

    $default  reduce using rule 99 (equality_expression)


State 161

   98 equality_expression: equality_expression . EQUAL relational_expression
   99                    | equality_expression . NOT_EQUAL relational_expression
  101 bitwise_and_expression: bitwise_and_expression AND_OP equality_expression .

    EQUAL      shift, and go to state 124
    NOT_EQUAL  shift, and go to state 125

    $default  reduce using rule 101 (bitwise_and_expression)


State 162

  101 bitwise_and_expression: bitwise_and_expression . AND_OP equality_expression
  103 bitwise_xor_expression: bitwise_xor_expression XOR_OP bitwise_and_expression .

    AND_OP  shift, and go to state 126

    $default  reduce using rule 103 (bitwise_xor_expression)


State 163

  103 bitwise_xor_expression: bitwise_xor_expression . XOR_OP bitwise_and_expression
  105 bitwise_or_expression: bitwise_or_expression OR_OP bitwise_xor_expression .

    XOR_OP  shift, and go to state 127

    $default  reduce using rule 105 (bitwise_or_expression)


State 164

  105 bitwise_or_expression: bitwise_or_expression . OR_OP bitwise_xor_expression
  107 logical_and_expression: logical_and_expression AND bitwise_or_expression .

    OR_OP  shift, and go to state 128

    $default  reduce using rule 107 (logical_and_expression)


State 165

  107 logical_and_expression: logical_and_expression . AND bitwise_or_expression
  109 logical_or_expression: logical_or_expression OR logical_and_expression .

    AND  shift, and go to state 129

    $default  reduce using rule 109 (logical_or_expression)


State 166

  111 assignment_expression: logical_or_expression ASSIGN assignment_expression .

    $default  reduce using rule 111 (assignment_expression)


State 167

   48 array_content: L_PARENTHESIS array_content COMMA . array_content R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 90

    array_content  go to state 175


State 168

   49 array_content: L_PARENTHESIS array_content R_PARENTHESIS .

    $default  reduce using rule 49 (array_content)


State 169

   51 array_expression: array_expression COMMA . expression

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 75
    logical_and_expression     go to state 76
    logical_or_expression      go to state 77
    assignment_expression      go to state 78
    expression                 go to state 176


State 170

   47 array_content: L_PARENTHESIS array_expression R_PARENTHESIS .

    $default  reduce using rule 47 (array_content)


State 171

   81 prefix_expression: L_BRACKET type_name R_BRACKET prefix_expression .

    $default  reduce using rule 81 (prefix_expression)


State 172

   70 suffix_expression: IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET .
   71                  | IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET . multidim_arr_list

    L_SQ_BRACKET  shift, and go to state 177

    L_SQ_BRACKET  [reduce using rule 70 (suffix_expression)]
    $default      reduce using rule 70 (suffix_expression)

    multidim_arr_list  go to state 178


State 173

   69 suffix_expression: suffix_expression L_BRACKET argument_expression_list R_BRACKET .

    $default  reduce using rule 69 (suffix_expression)


State 174

   58 argument_expression_list: assignment_expression COMMA . argument_expression_list

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    argument_expression_list   go to state 179
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 75
    logical_and_expression     go to state 76
    logical_or_expression      go to state 77
    assignment_expression      go to state 147


State 175

   48 array_content: L_PARENTHESIS array_content COMMA array_content . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 180


State 176

   51 array_expression: array_expression COMMA expression .

    $default  reduce using rule 51 (array_expression)


State 177

   55 multidim_arr_list: L_SQ_BRACKET . expression L_SQ_BRACKET
   56                  | L_SQ_BRACKET . expression L_SQ_BRACKET multidim_arr_list

    INC          shift, and go to state 54
    DEC          shift, and go to state 55
    ADD          shift, and go to state 56
    MINUS        shift, and go to state 57
    MULTIPLY     shift, and go to state 58
    LOGICAL_NOT  shift, and go to state 59
    BITWISE_NOT  shift, and go to state 60
    AND_OP       shift, and go to state 61
    L_BRACKET    shift, and go to state 62
    IDENTIFIER   shift, and go to state 63
    LITERAL      shift, and go to state 64

    primary_expression         go to state 65
    suffix_expression          go to state 66
    prefix_expression          go to state 67
    multiplicative_expression  go to state 68
    additive_expression        go to state 69
    shift_expression           go to state 70
    relational_expression      go to state 71
    equality_expression        go to state 72
    bitwise_and_expression     go to state 73
    bitwise_xor_expression     go to state 74
    bitwise_or_expression      go to state 75
    logical_and_expression     go to state 76
    logical_or_expression      go to state 77
    assignment_expression      go to state 78
    expression                 go to state 181


State 178

   71 suffix_expression: IDENTIFIER L_SQ_BRACKET expression R_SQ_BRACKET multidim_arr_list .

    $default  reduce using rule 71 (suffix_expression)


State 179

   58 argument_expression_list: assignment_expression COMMA argument_expression_list .

    $default  reduce using rule 58 (argument_expression_list)


State 180

   48 array_content: L_PARENTHESIS array_content COMMA array_content R_PARENTHESIS .

    $default  reduce using rule 48 (array_content)


State 181

   55 multidim_arr_list: L_SQ_BRACKET expression . L_SQ_BRACKET
   56                  | L_SQ_BRACKET expression . L_SQ_BRACKET multidim_arr_list

    L_SQ_BRACKET  shift, and go to state 182


State 182

   55 multidim_arr_list: L_SQ_BRACKET expression L_SQ_BRACKET .
   56                  | L_SQ_BRACKET expression L_SQ_BRACKET . multidim_arr_list

    L_SQ_BRACKET  shift, and go to state 177

    L_SQ_BRACKET  [reduce using rule 55 (multidim_arr_list)]
    $default      reduce using rule 55 (multidim_arr_list)

    multidim_arr_list  go to state 183


State 183

   56 multidim_arr_list: L_SQ_BRACKET expression L_SQ_BRACKET multidim_arr_list .

    $default  reduce using rule 56 (multidim_arr_list)
